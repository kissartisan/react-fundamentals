import { jsx, Global } from '@emotion/core';
import '@reach/tabs/styles.css';
import '@reach/tooltip/styles.css';
import React from 'react';
import ReactDOM from 'react-dom';
import { FaTools } from 'react-icons/fa';
import { Tooltip } from '@reach/tooltip';
import { Tabs, TabList, Tab, TabPanels, TabPanel } from '@reach/tabs';

var gray = '#f1f2f7';
var indigo = '#3f51b5';
var indigoDarken10 = '#364495';
var yellow = '#ffc107';

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var isLsKey = function (name) {
  return name.startsWith("__react_workshop_app");
};

var getKey = function (name) {
  return "__react_workshop_app_" + name + "__";
};

function install() {
  var requireDevToolsLocal = require.context('./', false, /dev-tools\.local\.js/);

  var local = requireDevToolsLocal.keys()[0];

  if (local) {
    requireDevToolsLocal(local);
  }

  function DevTools() {
    var rootRef = React.useRef();

    var _React$useState = React.useState(false),
        hovering = _React$useState[0],
        setHovering = _React$useState[1];

    var _useLocalStorageState = useLocalStorageState(getKey('devtools_persist'), false),
        persist = _useLocalStorageState[0],
        setPersist = _useLocalStorageState[1];

    var _useLocalStorageState2 = useLocalStorageState(getKey('devtools_tab_index'), 0),
        tabIndex = _useLocalStorageState2[0],
        setTabIndex = _useLocalStorageState2[1];

    var show = persist || hovering;
    React.useEffect(function () {
      function updateHoverState(event) {
        var _rootRef$current$cont, _rootRef$current;

        setHovering((_rootRef$current$cont = (_rootRef$current = rootRef.current) == null ? void 0 : _rootRef$current.contains(event.target)) != null ? _rootRef$current$cont : false);
      }

      document.addEventListener('mousemove', updateHoverState);
      return function () {
        document.removeEventListener('mousemove', updateHoverState);
      };
    }, []); // eslint-disable-next-line consistent-return

    React.useEffect(function () {
      if (hovering) {
        var iframes = document.querySelectorAll('iframe');

        for (var _iterator = _createForOfIteratorHelperLoose(iframes), _step; !(_step = _iterator()).done;) {
          var iframe = _step.value;
          iframe.style.pointerEvents = 'none';
        }

        return function () {
          for (var _iterator2 = _createForOfIteratorHelperLoose(iframes), _step2; !(_step2 = _iterator2()).done;) {
            var iframe = _step2.value;
            iframe.style.pointerEvents = '';
          }
        };
      }
    }, [hovering]);
    return jsx("div", {
      css: {
        position: 'fixed',
        zIndex: 20,
        bottom: -15,
        left: 0,
        right: 0,
        width: show ? '100%' : 0,
        transition: 'all 0.3s',
        label: {
          margin: 0,
          color: 'rgb(216, 221, 227)'
        },
        'input, select': {
          background: 'rgb(20, 36, 55)',
          border: '2px solid rgb(28, 46, 68)',
          borderRadius: 5,
          color: 'white',
          fontWeight: '600',
          padding: '5px',
          '::placeholder': {
            color: 'rgba(255,255,255,0.3)'
          },
          ':focus': {
            outlineColor: indigo,
            borderColor: indigo,
            outline: '1px'
          }
        },
        button: {
          cursor: 'pointer'
        },
        'button:not([data-reach-tab])': {
          borderRadius: 5,
          background: indigo,
          ':hover': {
            background: indigoDarken10
          },
          border: 0,
          color: gray
        },
        '[data-reach-tab]': {
          border: 0,
          ':focus': {
            outline: 'none'
          }
        },
        '[data-reach-tab][data-selected]': {
          background: 'rgb(11, 21, 33)',
          borderBottom: '3px solid white',
          marginBottom: -3
        }
      }
    }, jsx("div", {
      ref: rootRef,
      css: [{
        background: 'rgb(11, 21, 33)',
        opacity: '0.6',
        color: 'white',
        boxSizing: 'content-box',
        height: '60px',
        width: '68px',
        transition: 'all 0.3s',
        overflow: 'auto'
      }, show ? {
        height: '50vh',
        width: '100%',
        opacity: '1'
      } : null]
    }, jsx(Tooltip, {
      label: "Toggle Persist DevTools"
    }, jsx("button", {
      css: {
        display: 'flex',
        alignItems: 'center',
        fontSize: '1.2rem',
        border: 'none',
        padding: '10px 20px',
        background: 'none',
        marginTop: show ? -40 : 0,
        marginLeft: show ? 20 : 0,
        position: 'absolute',
        backgroundColor: 'rgb(11,21,33) !important',
        overflow: 'hidden',
        svg: {
          width: 20,
          marginRight: 8,
          color: persist ? 'white' : 'rgba(255,255,255,0.7)'
        },
        '::before': {
          content: '""',
          position: 'absolute',
          height: 4,
          width: '100%',
          left: 0,
          top: 0,
          background: persist ? yellow : 'transparent'
        }
      },
      onClick: function toggleShow() {
        return setPersist(function (v) {
          return !v;
        });
      }
    }, jsx(FaTools, null), show ? 'Workshop DevTools' : null)), show ? jsx(Tabs, {
      css: {
        padding: 20
      },
      index: tabIndex,
      onChange: function onChange(i) {
        return setTabIndex(i);
      }
    }, jsx(TabList, {
      css: {
        marginBottom: 20
      }
    }, jsx(Tab, null, "Controls"), jsx(Tab, null, "Request Failures")), jsx("div", {
      css: {
        border: '1px solid rgb(28,46,68)',
        margin: '0px -20px 20px -20px'
      }
    }), jsx(TabPanels, {
      css: {
        height: '100%'
      }
    }, jsx(TabPanel, null, jsx(ControlsPanel, null)), jsx(TabPanel, null, jsx(RequestFailUI, null)))) : null), show ? jsx(Global, {
      styles: {
        '#root': {
          marginBottom: '50vh'
        }
      }
    }) : null);
  }

  DevTools.displayName = 'DevTools'; // add dev tools UI to the page

  var devToolsRoot = document.getElementById('dev-tools');

  if (devToolsRoot) {
    ReactDOM.unmountComponentAtNode(devToolsRoot); // right
  }

  if (!devToolsRoot) {
    devToolsRoot = document.createElement('div');
    devToolsRoot.id = 'dev-tools';
    document.body.appendChild(devToolsRoot);
  }

  ReactDOM.render(jsx(DevTools, null), devToolsRoot);
}

function ControlsPanel() {
  return jsx("div", {
    css: {
      display: 'grid',
      gridTemplateColumns: '1fr',
      gridTemplateRows: 'repeat(auto-fill, minmax(40px, 40px) )',
      gridGap: '0.5rem',
      marginRight: '1.5rem'
    }
  }, jsx(EnableDevTools, null), jsx(FailureRate, null), jsx(RequestMinTime, null), jsx(RequestVarTime, null), jsx(ClearLocalStorage, null));
}

ControlsPanel.displayName = 'ControlsPanel';

function ClearLocalStorage() {
  return jsx("button", {
    onClick: function () {
      var keysToRemove = [];

      for (var i = 0; i < window.localStorage.length; i++) {
        var key = window.localStorage.key(i);
        if (isLsKey(key)) keysToRemove.push(key);
      }

      for (var _i = 0, _keysToRemove = keysToRemove; _i < _keysToRemove.length; _i++) {
        var lsKey = _keysToRemove[_i];
        window.localStorage.removeItem(lsKey);
      } // refresh


      window.location.assign(window.location);
    }
  }, "Purge Database");
}

ClearLocalStorage.displayName = 'ClearLocalStorage';

function FailureRate() {
  var _useLocalStorageState3 = useLocalStorageState(getKey('failure_rate'), 0),
      failureRate = _useLocalStorageState3[0],
      setFailureRate = _useLocalStorageState3[1];

  return jsx("div", {
    css: {
      width: '100%',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'space-between'
    }
  }, jsx("label", {
    htmlFor: "failureRate"
  }, "Request Failure Percentage: "), jsx("input", {
    css: {
      marginLeft: 6
    },
    value: failureRate * 100,
    type: "number",
    min: "0",
    max: "100",
    step: "10",
    onChange: function handleChange(event) {
      return setFailureRate(Number(event.target.value) / 100);
    },
    id: "failureRate"
  }));
}

FailureRate.displayName = 'FailureRate';

function EnableDevTools() {
  var _useLocalStorageState4 = useLocalStorageState(getKey('dev-tools'), process.env.NODE_ENV === 'development'),
      enableDevTools = _useLocalStorageState4[0],
      setEnableDevTools = _useLocalStorageState4[1];

  return jsx("div", {
    css: {
      width: '100%',
      display: 'flex',
      alignItems: 'center'
    }
  }, jsx("input", {
    css: {
      marginRight: 6
    },
    checked: enableDevTools,
    type: "checkbox",
    onChange: function handleChange(event) {
      return setEnableDevTools(event.target.checked);
    },
    id: "enableDevTools"
  }), jsx("label", {
    htmlFor: "enableDevTools"
  }, "Enable DevTools by default"));
}

EnableDevTools.displayName = 'EnableDevTools';

function RequestMinTime() {
  var _useLocalStorageState5 = useLocalStorageState(getKey('min_request_time'), 400),
      minTime = _useLocalStorageState5[0],
      setMinTime = _useLocalStorageState5[1];

  return jsx("div", {
    css: {
      width: '100%',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'space-between'
    }
  }, jsx("label", {
    htmlFor: "minTime"
  }, "Request min time (ms): "), jsx("input", {
    css: {
      marginLeft: 6
    },
    value: minTime,
    type: "number",
    step: "100",
    min: "0",
    max: 1000 * 60,
    onChange: function handleChange(event) {
      return setMinTime(Number(event.target.value));
    },
    id: "minTime"
  }));
}

RequestMinTime.displayName = 'RequestMinTime';

function RequestVarTime() {
  var _useLocalStorageState6 = useLocalStorageState(getKey('variable_request_time'), 400),
      varTime = _useLocalStorageState6[0],
      setVarTime = _useLocalStorageState6[1];

  return jsx("div", {
    css: {
      width: '100%',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'space-between'
    }
  }, jsx("label", {
    htmlFor: "varTime"
  }, "Request variable time (ms): "), jsx("input", {
    css: {
      marginLeft: 6
    },
    value: varTime,
    type: "number",
    step: "100",
    min: "0",
    max: 1000 * 60,
    onChange: function handleChange(event) {
      return setVarTime(Number(event.target.value));
    },
    id: "varTime"
  }));
}

RequestVarTime.displayName = 'RequestVarTime';

function RequestFailUI() {
  var _useLocalStorageState7 = useLocalStorageState(getKey('request_fail_config'), []),
      failConfig = _useLocalStorageState7[0],
      setFailConfig = _useLocalStorageState7[1];

  function handleRemoveClick(index) {
    setFailConfig(function (c) {
      return [].concat(c.slice(0, index), c.slice(index + 1));
    });
  }

  return jsx("div", {
    css: {
      display: 'flex',
      width: '100%'
    }
  }, jsx("form", {
    onSubmit: function (event) {
      event.preventDefault();
      var _event$target$element = event.target.elements,
          requestMethod = _event$target$element.requestMethod,
          urlMatch = _event$target$element.urlMatch;
      setFailConfig(function (c) {
        return [].concat(c, [{
          requestMethod: requestMethod.value,
          urlMatch: urlMatch.value
        }]);
      });
      requestMethod.value = '';
      urlMatch.value = '';
    },
    css: {
      display: 'grid',
      gridTemplateRows: 'repeat(auto-fill, minmax(50px, 60px) )',
      maxWidth: 300,
      width: '100%',
      marginRight: '1rem',
      gridGap: 10
    }
  }, jsx("div", {
    css: {
      width: '100%',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'space-between'
    }
  }, jsx("label", {
    htmlFor: "requestMethod"
  }, "Method:"), jsx("select", {
    id: "requestMethod",
    required: true
  }, jsx("option", {
    value: ""
  }, "Select"), jsx("option", {
    value: "ALL"
  }, "ALL"), jsx("option", {
    value: "GET"
  }, "GET"), jsx("option", {
    value: "POST"
  }, "POST"), jsx("option", {
    value: "PUT"
  }, "PUT"), jsx("option", {
    value: "DELETE"
  }, "DELETE"))), jsx("div", {
    css: {
      width: '100%'
    }
  }, jsx("label", {
    css: {
      display: 'block'
    },
    htmlFor: "urlMatch"
  }, "URL Match:"), jsx("input", {
    autoComplete: "off",
    css: {
      width: '100%',
      marginTop: 4
    },
    id: "urlMatch",
    required: true,
    placeholder: "/api/list-items/:listItemId"
  })), jsx("div", null, jsx("button", {
    css: {
      padding: '6px 16px'
    },
    type: "submit"
  }, "+ Add"))), jsx("ul", {
    css: {
      listStyle: 'none',
      margin: 0,
      padding: 0,
      width: '100%',
      paddingBottom: '2rem'
    }
  }, failConfig.map(function (_ref, index) {
    var requestMethod = _ref.requestMethod,
        urlMatch = _ref.urlMatch;
    return jsx("li", {
      key: index,
      css: {
        padding: '6px 10px',
        borderRadius: 5,
        margin: '5px 0',
        width: '100%',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'space-between',
        background: 'rgb(20,36,55)'
      }
    }, jsx("div", {
      css: {
        display: 'flex',
        flexWrap: 'wrap'
      }
    }, jsx("strong", {
      css: {
        minWidth: 70
      }
    }, requestMethod, ":"), jsx("span", {
      css: {
        marginLeft: 10,
        whiteSpace: 'pre'
      }
    }, urlMatch)), jsx("button", {
      css: {
        opacity: 0.6,
        ':hover': {
          opacity: 1
        },
        fontSize: 13,
        background: 'rgb(11, 20, 33) !important'
      },
      onClick: function onClick() {
        return handleRemoveClick(index);
      }
    }, "Remove"));
  })));
}

RequestFailUI.displayName = 'RequestFailUI';

var getLSDebugValue = function (_ref2) {
  var key = _ref2.key,
      state = _ref2.state,
      serialize = _ref2.serialize;
  return key + ": " + serialize(state);
};
/**
 *
 * @param {String} key The key to set in localStorage for this value
 * @param {Object} defaultValue The value to use if it is not already in localStorage
 * @param {{serialize: Function, deserialize: Function}} options The serialize and deserialize functions to use (defaults to JSON.stringify and JSON.parse respectively)
 */


function useLocalStorageState(key, defaultValue, _temp) {
  if (defaultValue === void 0) {
    defaultValue = '';
  }

  var _ref3 = _temp === void 0 ? {} : _temp,
      _ref3$serialize = _ref3.serialize,
      serialize = _ref3$serialize === void 0 ? JSON.stringify : _ref3$serialize,
      _ref3$deserialize = _ref3.deserialize,
      deserialize = _ref3$deserialize === void 0 ? JSON.parse : _ref3$deserialize;

  var _React$useState2 = React.useState(function () {
    var valueInLocalStorage = window.localStorage.getItem(key);

    if (valueInLocalStorage) {
      try {
        return deserialize(valueInLocalStorage);
      } catch (_unused) {// something went wrong reading the value in local storage
        // so we'll go with the default value
      }
    }

    return typeof defaultValue === 'function' ? defaultValue() : defaultValue;
  }),
      state = _React$useState2[0],
      setState = _React$useState2[1];

  React.useDebugValue({
    key: key,
    state: state,
    serialize: serialize
  }, getLSDebugValue);
  var prevKeyRef = React.useRef(key);
  React.useEffect(function () {
    var prevKey = prevKeyRef.current;

    if (prevKey !== key) {
      window.localStorage.removeItem(prevKey);
    }

    prevKeyRef.current = key;
  }, [key]);
  React.useEffect(function () {
    window.localStorage.setItem(key, serialize(state));
  }, [key, state, serialize]);
  return [state, setState];
}
/*
eslint
  no-unused-expressions: "off",
*/

export { install };
