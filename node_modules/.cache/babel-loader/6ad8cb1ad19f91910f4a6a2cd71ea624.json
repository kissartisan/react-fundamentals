{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createXMLHttpRequestOverride = void 0;\n/**\n * XMLHttpRequest override class.\n * Inspired by https://github.com/marvinhagemeister/xhr-mocklet.\n */\n\nvar until_1 = require(\"@open-draft/until\");\n\nvar headers_utils_1 = require(\"headers-utils\");\n\nvar parseJson_1 = require(\"../../utils/parseJson\");\n\nvar createEvent_1 = require(\"./helpers/createEvent\");\n\nvar createDebug = require('debug');\n\nexports.createXMLHttpRequestOverride = function (middleware, XMLHttpRequestPristine) {\n  var debug = createDebug('XHR');\n  return (\n    /** @class */\n    function () {\n      function XMLHttpRequestOverride() {\n        this.requestHeaders = {};\n        this.responseHeaders = {}; // Collection of events modified by `addEventListener`/`removeEventListener` calls.\n\n        this._events = [];\n        /* Request state */\n\n        this.UNSENT = 0;\n        this.OPENED = 1;\n        this.HEADERS_RECEIVED = 2;\n        this.LOADING = 3;\n        this.DONE = 4;\n        this.onreadystatechange = null;\n        /* Events */\n\n        this.onabort = null;\n        this.onerror = null;\n        this.onload = null;\n        this.onloadend = null;\n        this.onloadstart = null;\n        this.onprogress = null;\n        this.ontimeout = null;\n        this.url = '';\n        this.method = 'GET';\n        this.readyState = this.UNSENT;\n        this.withCredentials = false;\n        this.status = 200;\n        this.statusText = 'OK';\n        this.data = '';\n        this.response = '';\n        this.responseType = 'text';\n        this.responseText = '';\n        this.responseXML = null;\n        this.responseURL = '';\n        this.upload = null;\n        this.timeout = 0;\n      }\n\n      XMLHttpRequestOverride.prototype.triggerReadyStateChange = function (options) {\n        if (this.onreadystatechange) {\n          this.onreadystatechange.call(this, createEvent_1.createEvent(options, this, 'readystatechange'));\n        }\n      };\n\n      XMLHttpRequestOverride.prototype.trigger = function (eventName, options) {\n        debug('trigger', eventName);\n        this.triggerReadyStateChange(options);\n\n        var loadendEvent = this._events.find(function (event) {\n          return event.name === 'loadend';\n        });\n\n        if (this.readyState === this.DONE && (this.onloadend || loadendEvent)) {\n          var listener = this.onloadend || (loadendEvent === null || loadendEvent === void 0 ? void 0 : loadendEvent.listener);\n          listener === null || listener === void 0 ? void 0 : listener.call(this, createEvent_1.createEvent(options, this, 'loadend'));\n        } // Call the direct callback, if present.\n\n\n        var directCallback = this[\"on\" + eventName];\n        directCallback === null || directCallback === void 0 ? void 0 : directCallback.call(this, createEvent_1.createEvent(options, this, eventName)); // Check in the list of events attached via `addEventListener`.\n\n        for (var _i = 0, _a = this._events; _i < _a.length; _i++) {\n          var event_1 = _a[_i];\n\n          if (event_1.name === eventName) {\n            event_1.listener.call(this, createEvent_1.createEvent(options, this, eventName));\n          }\n        }\n\n        return this;\n      };\n\n      XMLHttpRequestOverride.prototype.reset = function () {\n        debug('reset');\n        this.readyState = this.UNSENT;\n        this.status = 200;\n        this.statusText = '';\n        this.requestHeaders = {};\n        this.responseHeaders = {};\n        this.data = '';\n        this.response = null;\n        this.responseText = null;\n        this.responseXML = null;\n      };\n\n      XMLHttpRequestOverride.prototype.open = function (method, url, async, user, password) {\n        if (async === void 0) {\n          async = true;\n        }\n\n        return __awaiter(this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            debug = createDebug(\"XHR \" + method + \" \" + url);\n            debug('open', {\n              method: method,\n              url: url,\n              async: async,\n              user: user,\n              password: password\n            });\n            this.reset();\n            this.readyState = this.OPENED;\n\n            if (typeof url === 'undefined') {\n              this.url = method;\n              this.method = 'GET';\n            } else {\n              this.url = url;\n              this.method = method;\n              this.async = async;\n              this.user = user;\n              this.password = password;\n            }\n\n            return [2\n            /*return*/\n            ];\n          });\n        });\n      };\n\n      XMLHttpRequestOverride.prototype.send = function (data) {\n        var _this = this;\n\n        debug('send %s %s', this.method, this.url);\n        this.readyState = this.LOADING;\n        this.data = data || '';\n        var url;\n\n        try {\n          url = new URL(this.url);\n        } catch (error) {\n          // Assume a relative URL, if construction of a new `URL` instance fails.\n          // Since `XMLHttpRequest` always executed in a DOM-like environment,\n          // resolve the relative request URL against the current window location.\n          url = new URL(this.url, window.location.href);\n        }\n\n        var requestHeaders = headers_utils_1.reduceHeadersObject(this.requestHeaders, function (headers, name, value) {\n          headers[name.toLowerCase()] = value;\n          return headers;\n        }, {});\n        debug('request headers', requestHeaders); // Create an intercepted request instance exposed to the request intercepting middleware.\n\n        var req = {\n          url: url,\n          method: this.method,\n          body: this.data,\n          headers: requestHeaders\n        };\n        debug('awaiting mocked response...');\n        Promise.resolve(until_1.until(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n              return [2\n              /*return*/\n              , middleware(req, this)];\n            });\n          });\n        })).then(function (_a) {\n          var _b;\n\n          var middlewareException = _a[0],\n              mockedResponse = _a[1]; // When the request middleware throws an exception, error the request.\n          // This cancels the request and is similar to a network error.\n\n          if (middlewareException) {\n            debug('middleware function threw an exception!', middlewareException); // No way to propagate the actual error message.\n\n            _this.trigger('error');\n\n            _this.abort();\n\n            return;\n          } // Return a mocked response, if provided in the middleware.\n\n\n          if (mockedResponse) {\n            debug('received mocked response', mockedResponse);\n            _this.status = mockedResponse.status || 200;\n            _this.statusText = mockedResponse.statusText || 'OK';\n            _this.responseHeaders = mockedResponse.headers ? headers_utils_1.flattenHeadersObject(mockedResponse.headers) : {};\n            debug('assigned response status', _this.status, _this.statusText);\n            debug('assigned response headers', _this.responseHeaders); // Mark that response headers has been received\n            // and trigger a ready state event to reflect received headers\n            // in a custom `onreadystatechange` callback.\n\n            _this.readyState = _this.HEADERS_RECEIVED;\n\n            _this.triggerReadyStateChange();\n\n            debug('response type', _this.responseType);\n            _this.response = _this.getResponseBody(mockedResponse.body);\n            _this.responseText = mockedResponse.body || '';\n            debug('assigned response body', _this.response);\n\n            if (mockedResponse.body && _this.response) {\n              // Presense of the mocked response implies a response body (not null).\n              // Presece of the coerced `this.response` implies the mocked body is valid.\n              var bodyBuffer = Buffer.from(mockedResponse.body); // Trigger a progress event based on the mocked response body.\n\n              _this.trigger('progress', {\n                loaded: bodyBuffer.length,\n                total: bodyBuffer.length\n              });\n            } // Explicitly mark the request as done, so its response never hangs.\n            // @see https://github.com/mswjs/node-request-interceptor/issues/13\n\n\n            _this.readyState = _this.DONE;\n\n            _this.trigger('loadstart');\n\n            _this.trigger('load');\n\n            _this.trigger('loadend');\n          } else {\n            debug('no mocked response received'); // Perform an original request, when the request middleware returned no mocked response.\n\n            var originalRequest_1 = new XMLHttpRequestPristine();\n            debug('opening an original request %s %s', _this.method, _this.url);\n            originalRequest_1.open(_this.method, _this.url, (_b = _this.async) !== null && _b !== void 0 ? _b : true, _this.user, _this.password); // Reflect a successful state of the original request\n            // on the patched instance.\n\n            originalRequest_1.onload = function () {\n              debug('original onload');\n              _this.status = originalRequest_1.status;\n              _this.statusText = originalRequest_1.statusText;\n              _this.responseURL = originalRequest_1.responseURL;\n              _this.responseType = originalRequest_1.responseType;\n              _this.response = originalRequest_1.response;\n              _this.responseText = originalRequest_1.responseText;\n              _this.responseXML = originalRequest_1.responseXML;\n              debug('received original response status:', _this.status, _this.statusText);\n              debug('received original response body:', _this.response);\n\n              _this.trigger('loadstart');\n\n              _this.trigger('load');\n            }; // Assign callbacks and event listeners from the intercepted XHR instance\n            // to the original XHR instance.\n\n\n            _this.propagateCallbacks(originalRequest_1);\n\n            _this.propagateListeners(originalRequest_1);\n\n            if (_this.async) {\n              originalRequest_1.timeout = _this.timeout;\n            }\n\n            debug('send', _this.data);\n            originalRequest_1.send(_this.data);\n          }\n        });\n      };\n\n      XMLHttpRequestOverride.prototype.abort = function () {\n        debug('abort');\n\n        if (this.readyState > this.UNSENT && this.readyState < this.DONE) {\n          this.readyState = this.UNSENT;\n          this.trigger('abort');\n        }\n      };\n\n      XMLHttpRequestOverride.prototype.dispatchEvent = function () {\n        return false;\n      };\n\n      XMLHttpRequestOverride.prototype.setRequestHeader = function (name, value) {\n        debug('set request header', name, value);\n        this.requestHeaders[name] = value;\n      };\n\n      XMLHttpRequestOverride.prototype.getResponseHeader = function (name) {\n        debug('get response header', name);\n\n        if (this.readyState < this.HEADERS_RECEIVED) {\n          debug('cannot return a header: headers not received (state: %s)', this.readyState);\n          return null;\n        }\n\n        var headerValue = Object.entries(this.responseHeaders).reduce(function (_, _a) {\n          var headerName = _a[0],\n              headerValue = _a[1]; // Ignore header name casing while still allowing to set response headers\n          // with an arbitrary casing (no normalization).\n\n          if ([headerName, headerName.toLowerCase()].includes(name)) {\n            return headerValue;\n          }\n\n          return null;\n        }, null);\n        debug('resolved response header', name, headerValue, this.responseHeaders);\n        return headerValue;\n      };\n\n      XMLHttpRequestOverride.prototype.getAllResponseHeaders = function () {\n        debug('get all response headers');\n\n        if (this.readyState < this.HEADERS_RECEIVED) {\n          debug('cannot return headers: headers not received (state: %s)', this.readyState);\n          return '';\n        }\n\n        return Object.entries(this.responseHeaders).map(function (_a) {\n          var name = _a[0],\n              value = _a[1];\n          return name + \": \" + value + \" \\r\\n\";\n        }).join('');\n      };\n\n      XMLHttpRequestOverride.prototype.addEventListener = function (name, listener) {\n        debug('addEventListener', name, listener);\n\n        this._events.push({\n          name: name,\n          listener: listener\n        });\n      };\n\n      XMLHttpRequestOverride.prototype.removeEventListener = function (name, listener) {\n        debug('removeEventListener', name, listener);\n        this._events = this._events.filter(function (storedEvent) {\n          return storedEvent.name !== name && storedEvent.listener !== listener;\n        });\n      };\n\n      XMLHttpRequestOverride.prototype.overrideMimeType = function () {};\n      /**\n       * Sets a proper `response` property based on the `responseType` value.\n       */\n\n\n      XMLHttpRequestOverride.prototype.getResponseBody = function (body) {\n        // Handle an improperly set \"null\" value of the mocked response body.\n        var textBody = body !== null && body !== void 0 ? body : '';\n        debug('coerced response body to', textBody);\n\n        switch (this.responseType) {\n          case 'json':\n            {\n              debug('resolving response body as JSON');\n              return parseJson_1.parseJson(textBody);\n            }\n\n          case 'blob':\n            {\n              var blobType = this.getResponseHeader('content-type') || 'text/plain';\n              debug('resolving response body as Blob', {\n                type: blobType\n              });\n              return new Blob([textBody], {\n                type: blobType\n              });\n            }\n\n          case 'arraybuffer':\n            {\n              debug('resolving response body as ArrayBuffer');\n              var buffer = Buffer.from(textBody);\n              var arrayBuffer = new Uint8Array(buffer);\n              return arrayBuffer;\n            }\n\n          default:\n            return textBody;\n        }\n      };\n      /**\n       * Propagates captured XHR instance callbacks to the given XHR instance.\n       * @note that `onload` listener is explicitly omitted.\n       */\n\n\n      XMLHttpRequestOverride.prototype.propagateCallbacks = function (req) {\n        req.onabort = this.abort;\n        req.onerror = this.onerror;\n        req.ontimeout = this.ontimeout;\n        req.onloadstart = this.onloadstart;\n        req.onloadend = this.onloadend;\n        req.onprogress = this.onprogress;\n        req.onreadystatechange = this.onreadystatechange;\n      };\n\n      XMLHttpRequestOverride.prototype.propagateListeners = function (req) {\n        this._events.forEach(function (_a) {\n          var name = _a.name,\n              listener = _a.listener;\n          req.addEventListener(name, listener);\n        });\n      };\n\n      return XMLHttpRequestOverride;\n    }()\n  );\n};","map":{"version":3,"sources":["../../../src/interceptors/XMLHttpRequest/XMLHttpRequestOverride.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createXMLHttpRequestOverride = void 0;\n/**\n * XMLHttpRequest override class.\n * Inspired by https://github.com/marvinhagemeister/xhr-mocklet.\n */\nvar until_1 = require(\"@open-draft/until\");\nvar headers_utils_1 = require(\"headers-utils\");\nvar parseJson_1 = require(\"../../utils/parseJson\");\nvar createEvent_1 = require(\"./helpers/createEvent\");\nvar createDebug = require('debug');\nexports.createXMLHttpRequestOverride = function (middleware, XMLHttpRequestPristine) {\n    var debug = createDebug('XHR');\n    return /** @class */ (function () {\n        function XMLHttpRequestOverride() {\n            this.requestHeaders = {};\n            this.responseHeaders = {};\n            // Collection of events modified by `addEventListener`/`removeEventListener` calls.\n            this._events = [];\n            /* Request state */\n            this.UNSENT = 0;\n            this.OPENED = 1;\n            this.HEADERS_RECEIVED = 2;\n            this.LOADING = 3;\n            this.DONE = 4;\n            this.onreadystatechange = null;\n            /* Events */\n            this.onabort = null;\n            this.onerror = null;\n            this.onload = null;\n            this.onloadend = null;\n            this.onloadstart = null;\n            this.onprogress = null;\n            this.ontimeout = null;\n            this.url = '';\n            this.method = 'GET';\n            this.readyState = this.UNSENT;\n            this.withCredentials = false;\n            this.status = 200;\n            this.statusText = 'OK';\n            this.data = '';\n            this.response = '';\n            this.responseType = 'text';\n            this.responseText = '';\n            this.responseXML = null;\n            this.responseURL = '';\n            this.upload = null;\n            this.timeout = 0;\n        }\n        XMLHttpRequestOverride.prototype.triggerReadyStateChange = function (options) {\n            if (this.onreadystatechange) {\n                this.onreadystatechange.call(this, createEvent_1.createEvent(options, this, 'readystatechange'));\n            }\n        };\n        XMLHttpRequestOverride.prototype.trigger = function (eventName, options) {\n            debug('trigger', eventName);\n            this.triggerReadyStateChange(options);\n            var loadendEvent = this._events.find(function (event) { return event.name === 'loadend'; });\n            if (this.readyState === this.DONE && (this.onloadend || loadendEvent)) {\n                var listener = this.onloadend || (loadendEvent === null || loadendEvent === void 0 ? void 0 : loadendEvent.listener);\n                listener === null || listener === void 0 ? void 0 : listener.call(this, createEvent_1.createEvent(options, this, 'loadend'));\n            }\n            // Call the direct callback, if present.\n            var directCallback = this[\"on\" + eventName];\n            directCallback === null || directCallback === void 0 ? void 0 : directCallback.call(this, createEvent_1.createEvent(options, this, eventName));\n            // Check in the list of events attached via `addEventListener`.\n            for (var _i = 0, _a = this._events; _i < _a.length; _i++) {\n                var event_1 = _a[_i];\n                if (event_1.name === eventName) {\n                    event_1.listener.call(this, createEvent_1.createEvent(options, this, eventName));\n                }\n            }\n            return this;\n        };\n        XMLHttpRequestOverride.prototype.reset = function () {\n            debug('reset');\n            this.readyState = this.UNSENT;\n            this.status = 200;\n            this.statusText = '';\n            this.requestHeaders = {};\n            this.responseHeaders = {};\n            this.data = '';\n            this.response = null;\n            this.responseText = null;\n            this.responseXML = null;\n        };\n        XMLHttpRequestOverride.prototype.open = function (method, url, async, user, password) {\n            if (async === void 0) { async = true; }\n            return __awaiter(this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                    debug = createDebug(\"XHR \" + method + \" \" + url);\n                    debug('open', { method: method, url: url, async: async, user: user, password: password });\n                    this.reset();\n                    this.readyState = this.OPENED;\n                    if (typeof url === 'undefined') {\n                        this.url = method;\n                        this.method = 'GET';\n                    }\n                    else {\n                        this.url = url;\n                        this.method = method;\n                        this.async = async;\n                        this.user = user;\n                        this.password = password;\n                    }\n                    return [2 /*return*/];\n                });\n            });\n        };\n        XMLHttpRequestOverride.prototype.send = function (data) {\n            var _this = this;\n            debug('send %s %s', this.method, this.url);\n            this.readyState = this.LOADING;\n            this.data = data || '';\n            var url;\n            try {\n                url = new URL(this.url);\n            }\n            catch (error) {\n                // Assume a relative URL, if construction of a new `URL` instance fails.\n                // Since `XMLHttpRequest` always executed in a DOM-like environment,\n                // resolve the relative request URL against the current window location.\n                url = new URL(this.url, window.location.href);\n            }\n            var requestHeaders = headers_utils_1.reduceHeadersObject(this.requestHeaders, function (headers, name, value) {\n                headers[name.toLowerCase()] = value;\n                return headers;\n            }, {});\n            debug('request headers', requestHeaders);\n            // Create an intercepted request instance exposed to the request intercepting middleware.\n            var req = {\n                url: url,\n                method: this.method,\n                body: this.data,\n                headers: requestHeaders,\n            };\n            debug('awaiting mocked response...');\n            Promise.resolve(until_1.until(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\n                return [2 /*return*/, middleware(req, this)];\n            }); }); })).then(function (_a) {\n                var _b;\n                var middlewareException = _a[0], mockedResponse = _a[1];\n                // When the request middleware throws an exception, error the request.\n                // This cancels the request and is similar to a network error.\n                if (middlewareException) {\n                    debug('middleware function threw an exception!', middlewareException);\n                    // No way to propagate the actual error message.\n                    _this.trigger('error');\n                    _this.abort();\n                    return;\n                }\n                // Return a mocked response, if provided in the middleware.\n                if (mockedResponse) {\n                    debug('received mocked response', mockedResponse);\n                    _this.status = mockedResponse.status || 200;\n                    _this.statusText = mockedResponse.statusText || 'OK';\n                    _this.responseHeaders = mockedResponse.headers\n                        ? headers_utils_1.flattenHeadersObject(mockedResponse.headers)\n                        : {};\n                    debug('assigned response status', _this.status, _this.statusText);\n                    debug('assigned response headers', _this.responseHeaders);\n                    // Mark that response headers has been received\n                    // and trigger a ready state event to reflect received headers\n                    // in a custom `onreadystatechange` callback.\n                    _this.readyState = _this.HEADERS_RECEIVED;\n                    _this.triggerReadyStateChange();\n                    debug('response type', _this.responseType);\n                    _this.response = _this.getResponseBody(mockedResponse.body);\n                    _this.responseText = mockedResponse.body || '';\n                    debug('assigned response body', _this.response);\n                    if (mockedResponse.body && _this.response) {\n                        // Presense of the mocked response implies a response body (not null).\n                        // Presece of the coerced `this.response` implies the mocked body is valid.\n                        var bodyBuffer = Buffer.from(mockedResponse.body);\n                        // Trigger a progress event based on the mocked response body.\n                        _this.trigger('progress', {\n                            loaded: bodyBuffer.length,\n                            total: bodyBuffer.length,\n                        });\n                    }\n                    // Explicitly mark the request as done, so its response never hangs.\n                    // @see https://github.com/mswjs/node-request-interceptor/issues/13\n                    _this.readyState = _this.DONE;\n                    _this.trigger('loadstart');\n                    _this.trigger('load');\n                    _this.trigger('loadend');\n                }\n                else {\n                    debug('no mocked response received');\n                    // Perform an original request, when the request middleware returned no mocked response.\n                    var originalRequest_1 = new XMLHttpRequestPristine();\n                    debug('opening an original request %s %s', _this.method, _this.url);\n                    originalRequest_1.open(_this.method, _this.url, (_b = _this.async) !== null && _b !== void 0 ? _b : true, _this.user, _this.password);\n                    // Reflect a successful state of the original request\n                    // on the patched instance.\n                    originalRequest_1.onload = function () {\n                        debug('original onload');\n                        _this.status = originalRequest_1.status;\n                        _this.statusText = originalRequest_1.statusText;\n                        _this.responseURL = originalRequest_1.responseURL;\n                        _this.responseType = originalRequest_1.responseType;\n                        _this.response = originalRequest_1.response;\n                        _this.responseText = originalRequest_1.responseText;\n                        _this.responseXML = originalRequest_1.responseXML;\n                        debug('received original response status:', _this.status, _this.statusText);\n                        debug('received original response body:', _this.response);\n                        _this.trigger('loadstart');\n                        _this.trigger('load');\n                    };\n                    // Assign callbacks and event listeners from the intercepted XHR instance\n                    // to the original XHR instance.\n                    _this.propagateCallbacks(originalRequest_1);\n                    _this.propagateListeners(originalRequest_1);\n                    if (_this.async) {\n                        originalRequest_1.timeout = _this.timeout;\n                    }\n                    debug('send', _this.data);\n                    originalRequest_1.send(_this.data);\n                }\n            });\n        };\n        XMLHttpRequestOverride.prototype.abort = function () {\n            debug('abort');\n            if (this.readyState > this.UNSENT && this.readyState < this.DONE) {\n                this.readyState = this.UNSENT;\n                this.trigger('abort');\n            }\n        };\n        XMLHttpRequestOverride.prototype.dispatchEvent = function () {\n            return false;\n        };\n        XMLHttpRequestOverride.prototype.setRequestHeader = function (name, value) {\n            debug('set request header', name, value);\n            this.requestHeaders[name] = value;\n        };\n        XMLHttpRequestOverride.prototype.getResponseHeader = function (name) {\n            debug('get response header', name);\n            if (this.readyState < this.HEADERS_RECEIVED) {\n                debug('cannot return a header: headers not received (state: %s)', this.readyState);\n                return null;\n            }\n            var headerValue = Object.entries(this.responseHeaders).reduce(function (_, _a) {\n                var headerName = _a[0], headerValue = _a[1];\n                // Ignore header name casing while still allowing to set response headers\n                // with an arbitrary casing (no normalization).\n                if ([headerName, headerName.toLowerCase()].includes(name)) {\n                    return headerValue;\n                }\n                return null;\n            }, null);\n            debug('resolved response header', name, headerValue, this.responseHeaders);\n            return headerValue;\n        };\n        XMLHttpRequestOverride.prototype.getAllResponseHeaders = function () {\n            debug('get all response headers');\n            if (this.readyState < this.HEADERS_RECEIVED) {\n                debug('cannot return headers: headers not received (state: %s)', this.readyState);\n                return '';\n            }\n            return Object.entries(this.responseHeaders)\n                .map(function (_a) {\n                var name = _a[0], value = _a[1];\n                return name + \": \" + value + \" \\r\\n\";\n            })\n                .join('');\n        };\n        XMLHttpRequestOverride.prototype.addEventListener = function (name, listener) {\n            debug('addEventListener', name, listener);\n            this._events.push({\n                name: name,\n                listener: listener,\n            });\n        };\n        XMLHttpRequestOverride.prototype.removeEventListener = function (name, listener) {\n            debug('removeEventListener', name, listener);\n            this._events = this._events.filter(function (storedEvent) {\n                return storedEvent.name !== name && storedEvent.listener !== listener;\n            });\n        };\n        XMLHttpRequestOverride.prototype.overrideMimeType = function () { };\n        /**\n         * Sets a proper `response` property based on the `responseType` value.\n         */\n        XMLHttpRequestOverride.prototype.getResponseBody = function (body) {\n            // Handle an improperly set \"null\" value of the mocked response body.\n            var textBody = body !== null && body !== void 0 ? body : '';\n            debug('coerced response body to', textBody);\n            switch (this.responseType) {\n                case 'json': {\n                    debug('resolving response body as JSON');\n                    return parseJson_1.parseJson(textBody);\n                }\n                case 'blob': {\n                    var blobType = this.getResponseHeader('content-type') || 'text/plain';\n                    debug('resolving response body as Blob', { type: blobType });\n                    return new Blob([textBody], {\n                        type: blobType,\n                    });\n                }\n                case 'arraybuffer': {\n                    debug('resolving response body as ArrayBuffer');\n                    var buffer = Buffer.from(textBody);\n                    var arrayBuffer = new Uint8Array(buffer);\n                    return arrayBuffer;\n                }\n                default:\n                    return textBody;\n            }\n        };\n        /**\n         * Propagates captured XHR instance callbacks to the given XHR instance.\n         * @note that `onload` listener is explicitly omitted.\n         */\n        XMLHttpRequestOverride.prototype.propagateCallbacks = function (req) {\n            req.onabort = this.abort;\n            req.onerror = this.onerror;\n            req.ontimeout = this.ontimeout;\n            req.onloadstart = this.onloadstart;\n            req.onloadend = this.onloadend;\n            req.onprogress = this.onprogress;\n            req.onreadystatechange = this.onreadystatechange;\n        };\n        XMLHttpRequestOverride.prototype.propagateListeners = function (req) {\n            this._events.forEach(function (_a) {\n                var name = _a.name, listener = _a.listener;\n                req.addEventListener(name, listener);\n            });\n        };\n        return XMLHttpRequestOverride;\n    }());\n};\n//# sourceMappingURL=XMLHttpRequestOverride.js.map"]},"metadata":{},"sourceType":"script"}