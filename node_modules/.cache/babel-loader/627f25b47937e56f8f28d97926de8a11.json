{"ast":null,"code":"import React, { useState, useRef, useEffect, Children, Fragment, cloneElement } from 'react';\nimport { useId } from '@reach/auto-id';\nimport { useForkedRef, checkStyles, getOwnerDocument, makeId, wrapEvent, forwardRefWithAs, warning, getDocumentDimensions } from '@reach/utils';\nimport Portal from '@reach/portal';\nimport VisuallyHidden from '@reach/visually-hidden';\nimport { useRect } from '@reach/rect';\nimport PropTypes from 'prop-types';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _on, _on2, _on3, _on4, _on5, _states;\n\nvar MOUSE_REST_TIMEOUT = 100;\nvar LEAVE_TIMEOUT = 500; ////////////////////////////////////////////////////////////////////////////////\n// States\n// Nothing goin' on\n\nvar IDLE = \"IDLE\"; // We're considering showing the tooltip, but we're gonna wait a sec\n\nvar FOCUSED = \"FOCUSED\"; // It's on!\n\nvar VISIBLE = \"VISIBLE\"; // Focus has left, but we want to keep it visible for a sec\n\nvar LEAVING_VISIBLE = \"LEAVING_VISIBLE\"; // The user clicked the tool, so we want to hide the thing, we can't just use\n// IDLE because we need to ignore mousemove, etc.\n\nvar DISMISSED = \"DISMISSED\"; ////////////////////////////////////////////////////////////////////////////////\n// Events\n\nvar BLUR = \"BLUR\";\nvar FOCUS = \"FOCUS\";\nvar GLOBAL_MOUSE_MOVE = \"GLOBAL_MOUSE_MOVE\";\nvar MOUSE_DOWN = \"MOUSE_DOWN\";\nvar MOUSE_ENTER = \"MOUSE_ENTER\";\nvar MOUSE_LEAVE = \"MOUSE_LEAVE\";\nvar MOUSE_MOVE = \"MOUSE_MOVE\";\nvar REST = \"REST\";\nvar SELECT_WITH_KEYBOARD = \"SELECT_WITH_KEYBOARD\";\nvar TIME_COMPLETE = \"TIME_COMPLETE\";\nvar chart = {\n  initial: IDLE,\n  states: (_states = {}, _states[IDLE] = {\n    enter: clearContextId,\n    on: (_on = {}, _on[MOUSE_ENTER] = FOCUSED, _on[FOCUS] = VISIBLE, _on)\n  }, _states[FOCUSED] = {\n    enter: startRestTimer,\n    leave: clearRestTimer,\n    on: (_on2 = {}, _on2[MOUSE_MOVE] = FOCUSED, _on2[MOUSE_LEAVE] = IDLE, _on2[MOUSE_DOWN] = DISMISSED, _on2[BLUR] = IDLE, _on2[REST] = VISIBLE, _on2)\n  }, _states[VISIBLE] = {\n    on: (_on3 = {}, _on3[FOCUS] = FOCUSED, _on3[MOUSE_ENTER] = FOCUSED, _on3[MOUSE_LEAVE] = LEAVING_VISIBLE, _on3[BLUR] = LEAVING_VISIBLE, _on3[MOUSE_DOWN] = DISMISSED, _on3[SELECT_WITH_KEYBOARD] = DISMISSED, _on3[GLOBAL_MOUSE_MOVE] = LEAVING_VISIBLE, _on3)\n  }, _states[LEAVING_VISIBLE] = {\n    enter: startLeavingVisibleTimer,\n    leave: function leave() {\n      clearLeavingVisibleTimer();\n      clearContextId();\n    },\n    on: (_on4 = {}, _on4[MOUSE_ENTER] = VISIBLE, _on4[FOCUS] = VISIBLE, _on4[TIME_COMPLETE] = IDLE, _on4)\n  }, _states[DISMISSED] = {\n    leave: function leave() {\n      // allows us to come on back later w/o entering something else first\n      context.id = null;\n    },\n    on: (_on5 = {}, _on5[MOUSE_LEAVE] = IDLE, _on5[BLUR] = IDLE, _on5)\n  }, _states)\n};\n/*\r\n * Chart context allows us to persist some data around, in Tooltip all we use\r\n * is the id of the current tooltip being interacted with.\r\n */\n\nvar context = {\n  id: null\n};\nvar state = chart.initial; ////////////////////////////////////////////////////////////////////////////////\n// Subscriptions:\n//\n// We could require apps to render a <TooltipProvider> around the app and use\n// React context to notify Tooltips of changes to our state machine, instead\n// we manage subscriptions ourselves and simplify the Tooltip API.\n//\n// Maybe if default context could take a hook (instead of just a static value)\n// that was rendered at the root for us, that'd be cool! But it doesn't.\n\nvar subscriptions = [];\n\nfunction subscribe(fn) {\n  subscriptions.push(fn);\n  return function () {\n    subscriptions.splice(subscriptions.indexOf(fn), 1);\n  };\n}\n\nfunction notify() {\n  subscriptions.forEach(function (fn) {\n    return fn(state, context);\n  });\n} ////////////////////////////////////////////////////////////////////////////////\n// Timeouts:\n// Manages when the user \"rests\" on an element. Keeps the interface from being\n// flashing tooltips all the time as the user moves the mouse around the screen.\n\n\nvar restTimeout;\n\nfunction startRestTimer() {\n  window.clearTimeout(restTimeout);\n  restTimeout = window.setTimeout(function () {\n    return transition(REST);\n  }, MOUSE_REST_TIMEOUT);\n}\n\nfunction clearRestTimer() {\n  window.clearTimeout(restTimeout);\n} // Manages the delay to hide the tooltip after rest leaves.\n\n\nvar leavingVisibleTimer;\n\nfunction startLeavingVisibleTimer() {\n  window.clearTimeout(leavingVisibleTimer);\n  leavingVisibleTimer = window.setTimeout(function () {\n    return transition(TIME_COMPLETE);\n  }, LEAVE_TIMEOUT);\n}\n\nfunction clearLeavingVisibleTimer() {\n  window.clearTimeout(leavingVisibleTimer);\n} // allows us to come on back later w/o entering something else first after the\n// user leaves or dismisses\n\n\nfunction clearContextId() {\n  context.id = null;\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * useTooltip\r\n *\r\n * @param params\r\n */\n\n\nfunction useTooltip(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      idProp = _ref.id,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseMove = _ref.onMouseMove,\n      onMouseLeave = _ref.onMouseLeave,\n      onFocus = _ref.onFocus,\n      onBlur = _ref.onBlur,\n      onKeyDown = _ref.onKeyDown,\n      onMouseDown = _ref.onMouseDown,\n      forwardedRef = _ref.ref,\n      DEBUG_STYLE = _ref.DEBUG_STYLE;\n\n  var id = String(useId(idProp));\n\n  var _useState = useState(DEBUG_STYLE ? true : id === null ? false : context.id === id && state === VISIBLE),\n      isVisible = _useState[0],\n      setIsVisible = _useState[1]; // hopefully they always pass a ref if they ever pass one\n\n\n  var ownRef = useRef(null);\n  var ref = useForkedRef(forwardedRef, ownRef); // TODO: Fix in utils\n\n  var triggerRect = useRect(ownRef, isVisible);\n  useEffect(function () {\n    return subscribe(function () {\n      if (context.id === id && (state === VISIBLE || state === LEAVING_VISIBLE)) {\n        setIsVisible(true);\n      } else {\n        setIsVisible(false);\n      }\n    });\n  }, [id]);\n  useEffect(function () {\n    return checkStyles(\"tooltip\");\n  }, []);\n  useEffect(function () {\n    var ownerDocument = getOwnerDocument(ownRef.current) || document;\n\n    function listener(event) {\n      if ((event.key === \"Escape\" || event.key === \"Esc\") && state === VISIBLE) {\n        transition(SELECT_WITH_KEYBOARD);\n      }\n    }\n\n    ownerDocument.addEventListener(\"keydown\", listener);\n    return function () {\n      return ownerDocument.removeEventListener(\"keydown\", listener);\n    };\n  }, []);\n\n  function handleMouseEnter() {\n    transition(MOUSE_ENTER, {\n      id: id\n    });\n  }\n\n  function handleMouseMove() {\n    transition(MOUSE_MOVE, {\n      id: id\n    });\n  }\n\n  function handleFocus() {\n    // @ts-ignore\n    if (window.__REACH_DISABLE_TOOLTIPS) {\n      return;\n    }\n\n    transition(FOCUS, {\n      id: id\n    });\n  }\n\n  function handleMouseLeave() {\n    transition(MOUSE_LEAVE);\n  }\n\n  function handleBlur() {\n    // Allow quick click from one tool to another\n    if (context.id !== id) return;\n    transition(BLUR);\n  }\n\n  function handleMouseDown() {\n    // Allow quick click from one tool to another\n    if (context.id !== id) return;\n    transition(MOUSE_DOWN);\n  }\n\n  function handleKeyDown(event) {\n    if (event.key === \"Enter\" || event.key === \" \") {\n      transition(SELECT_WITH_KEYBOARD);\n    }\n  }\n\n  var trigger = {\n    // The element that triggers the tooltip references the tooltip element with\n    // `aria-describedby`.\n    // https://www.w3.org/TR/wai-aria-practices-1.2/#tooltip\n    \"aria-describedby\": isVisible ? makeId(\"tooltip\", id) : undefined,\n    \"data-reach-tooltip-trigger\": \"\",\n    ref: ref,\n    onMouseEnter: wrapEvent(onMouseEnter, handleMouseEnter),\n    onMouseMove: wrapEvent(onMouseMove, handleMouseMove),\n    onFocus: wrapEvent(onFocus, handleFocus),\n    onBlur: wrapEvent(onBlur, handleBlur),\n    onMouseLeave: wrapEvent(onMouseLeave, handleMouseLeave),\n    onKeyDown: wrapEvent(onKeyDown, handleKeyDown),\n    onMouseDown: wrapEvent(onMouseDown, handleMouseDown)\n  };\n  var tooltip = {\n    id: id,\n    triggerRect: triggerRect,\n    isVisible: isVisible\n  };\n  return [trigger, tooltip, isVisible];\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * Tooltip\r\n *\r\n * @see Docs https://reach.tech/tooltip#tooltip\r\n */\n\n\nvar Tooltip = /*#__PURE__*/forwardRefWithAs(function (_ref2, forwardedRef) {\n  var children = _ref2.children,\n      label = _ref2.label,\n      DEPRECATED_ariaLabel = _ref2.ariaLabel,\n      id = _ref2.id,\n      DEBUG_STYLE = _ref2.DEBUG_STYLE,\n      props = _objectWithoutPropertiesLoose(_ref2, [\"children\", \"label\", \"ariaLabel\", \"id\", \"DEBUG_STYLE\"]);\n\n  var child = Children.only(children);\n  process.env.NODE_ENV !== \"production\" ? warning(!DEPRECATED_ariaLabel, \"The `ariaLabel prop is deprecated and will be removed from @reach/tooltip in a future version. Please use `aria-label` instead.\") : void 0; // We need to pass some properties from the child into useTooltip\n  // to make sure users can maintain control over the trigger's ref and events\n\n  var _useTooltip = useTooltip({\n    id: id,\n    onMouseEnter: child.props.onMouseEnter,\n    onMouseMove: child.props.onMouseMove,\n    onMouseLeave: child.props.onMouseLeave,\n    onFocus: child.props.onFocus,\n    onBlur: child.props.onBlur,\n    onKeyDown: child.props.onKeyDown,\n    onMouseDown: child.props.onMouseDown,\n    ref: child.ref,\n    DEBUG_STYLE: DEBUG_STYLE\n  }),\n      trigger = _useTooltip[0],\n      tooltip = _useTooltip[1];\n\n  return React.createElement(Fragment, null, cloneElement(child, trigger), React.createElement(TooltipPopup, Object.assign({\n    ref: forwardedRef,\n    label: label,\n    \"aria-label\": DEPRECATED_ariaLabel\n  }, tooltip, props)));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  Tooltip.displayName = \"Tooltip\";\n  Tooltip.propTypes = {\n    children: PropTypes.node.isRequired,\n    label: PropTypes.node.isRequired,\n    ariaLabel: PropTypes.string\n  };\n}\n/**\r\n * TooltipPopup\r\n *\r\n * @see Docs https://reach.tech/tooltip#tooltippopup\r\n */\n\n\nvar TooltipPopup = /*#__PURE__*/forwardRefWithAs(function TooltipPopup(_ref3, forwardRef) {\n  var label = _ref3.label,\n      DEPRECATED_ariaLabel = _ref3.ariaLabel,\n      isVisible = _ref3.isVisible,\n      id = _ref3.id,\n      props = _objectWithoutPropertiesLoose(_ref3, [\"label\", \"ariaLabel\", \"isVisible\", \"id\"]);\n\n  return isVisible ? React.createElement(Portal, null, React.createElement(TooltipContent, Object.assign({\n    ref: forwardRef,\n    label: label,\n    \"aria-label\": DEPRECATED_ariaLabel,\n    isVisible: isVisible\n  }, props, {\n    id: makeId(\"tooltip\", String(id))\n  }))) : null;\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  TooltipPopup.displayName = \"TooltipPopup\";\n  TooltipPopup.propTypes = {\n    label: PropTypes.node.isRequired,\n    ariaLabel: PropTypes.string,\n    position: PropTypes.func\n  };\n}\n/**\r\n * TooltipContent\r\n *\r\n * We need a separate component so that useRect works inside the portal.\r\n *\r\n * @see Docs https://reach.tech/tooltip#tooltipcontent\r\n */\n\n\nvar TooltipContent = /*#__PURE__*/forwardRefWithAs(function TooltipContent(_ref4, forwardedRef) {\n  var ariaLabel = _ref4.ariaLabel,\n      realAriaLabel = _ref4[\"aria-label\"],\n      _ref4$as = _ref4.as,\n      Comp = _ref4$as === void 0 ? \"div\" : _ref4$as,\n      id = _ref4.id,\n      isVisible = _ref4.isVisible,\n      label = _ref4.label,\n      _ref4$position = _ref4.position,\n      position = _ref4$position === void 0 ? positionDefault : _ref4$position,\n      style = _ref4.style,\n      triggerRect = _ref4.triggerRect,\n      props = _objectWithoutPropertiesLoose(_ref4, [\"ariaLabel\", \"aria-label\", \"as\", \"id\", \"isVisible\", \"label\", \"position\", \"style\", \"triggerRect\"]); // The element that serves as the tooltip container has role tooltip.\n  // https://www.w3.org/TR/wai-aria-practices-1.2/#tooltip\n  // When an app passes an `aria-label`, we actually want to implement\n  // `role=\"tooltip\"` on a visually hidden element inside of the trigger.\n  // In these cases we want the screen reader user to know both the content in\n  // the tooltip, but also the content in the badge. For screen reader users,\n  // the only content announced to them is whatever is in the tooltip.\n\n\n  var hasAriaLabel = (realAriaLabel || ariaLabel) != null;\n  var ownRef = useRef(null);\n  var ref = useForkedRef(forwardedRef, ownRef);\n  var tooltipRect = useRect(ownRef, isVisible);\n  return React.createElement(Fragment, null, React.createElement(Comp, Object.assign({\n    role: hasAriaLabel ? undefined : \"tooltip\"\n  }, props, {\n    ref: ref,\n    \"data-reach-tooltip\": \"\",\n    id: hasAriaLabel ? undefined : id,\n    style: _extends({}, style, getStyles(position, triggerRect, tooltipRect))\n  }), label), hasAriaLabel && React.createElement(VisuallyHidden, {\n    role: \"tooltip\",\n    id: id\n  }, realAriaLabel || ariaLabel));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  TooltipContent.displayName = \"TooltipContent\";\n  TooltipContent.propTypes = {};\n} ////////////////////////////////////////////////////////////////////////////////\n// feels awkward when it's perfectly aligned w/ the trigger\n\n\nvar OFFSET = 8;\n\nfunction getStyles(position, triggerRect, tooltipRect) {\n  var haventMeasuredTooltipYet = !tooltipRect;\n\n  if (haventMeasuredTooltipYet) {\n    return {\n      visibility: \"hidden\"\n    };\n  }\n\n  return position(triggerRect, tooltipRect);\n}\n\nvar positionDefault = function positionDefault(triggerRect, tooltipRect) {\n  var _getDocumentDimension = getDocumentDimensions(),\n      windowWidth = _getDocumentDimension.width,\n      windowHeight = _getDocumentDimension.height;\n\n  if (!triggerRect || !tooltipRect) {\n    return {};\n  }\n\n  var collisions = {\n    top: triggerRect.top - tooltipRect.height < 0,\n    right: windowWidth < triggerRect.left + tooltipRect.width,\n    bottom: windowHeight < triggerRect.bottom + tooltipRect.height + OFFSET,\n    left: triggerRect.left - tooltipRect.width < 0\n  };\n  var directionRight = collisions.right && !collisions.left;\n  var directionUp = collisions.bottom && !collisions.top;\n  return {\n    left: directionRight ? triggerRect.right - tooltipRect.width + window.pageXOffset + \"px\" : triggerRect.left + window.pageXOffset + \"px\",\n    top: directionUp ? triggerRect.top - OFFSET - tooltipRect.height + window.pageYOffset + \"px\" : triggerRect.top + OFFSET + triggerRect.height + window.pageYOffset + \"px\"\n  };\n}; ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * Finds the next state from the current state + action. If the chart doesn't\r\n * describe that transition, it will throw.\r\n *\r\n * It also manages lifecycles of the machine, (enter/leave hooks on the state\r\n * chart)\r\n *\r\n * @param event\r\n * @param payload\r\n */\n\n\nvar transition = function transition(event, payload) {\n  var stateDef = chart.states[state];\n  var nextState = stateDef && stateDef.on && stateDef.on[event]; // Really useful for debugging\n  // console.log({ event, state, nextState, contextId: context.id });\n  // !nextState && console.log('no transition taken')\n\n  if (!nextState) {\n    return;\n  }\n\n  if (stateDef && stateDef.leave) {\n    stateDef.leave();\n  }\n\n  if (payload) {\n    context = payload;\n  }\n\n  var nextDef = chart.states[nextState];\n\n  if (nextDef && nextDef.enter) {\n    nextDef.enter();\n  }\n\n  state = nextState;\n  notify();\n};\n\nexport default Tooltip;\nexport { LEAVE_TIMEOUT, MOUSE_REST_TIMEOUT, Tooltip, TooltipPopup, useTooltip };","map":{"version":3,"sources":["../src/index.tsx"],"names":["MOUSE_REST_TIMEOUT","LEAVE_TIMEOUT","IDLE","FOCUSED","VISIBLE","LEAVING_VISIBLE","DISMISSED","BLUR","FOCUS","GLOBAL_MOUSE_MOVE","MOUSE_DOWN","MOUSE_ENTER","MOUSE_LEAVE","MOUSE_MOVE","REST","SELECT_WITH_KEYBOARD","TIME_COMPLETE","chart","initial","states","enter","on","leave","clearLeavingVisibleTimer","clearContextId","context","id","state","subscriptions","fn","window","restTimeout","transition","leavingVisibleTimer","useTooltip","idProp","onMouseEnter","onMouseMove","onMouseLeave","onFocus","onBlur","onKeyDown","onMouseDown","ref","forwardedRef","DEBUG_STYLE","String","useId","isVisible","setIsVisible","useState","ownRef","useRef","useForkedRef","triggerRect","useRect","useEffect","subscribe","checkStyles","ownerDocument","getOwnerDocument","event","trigger","makeId","wrapEvent","tooltip","Tooltip","forwardRefWithAs","children","label","ariaLabel","DEPRECATED_ariaLabel","props","child","Children","React","cloneElement","PropTypes","string","TooltipPopup","forwardRef","position","func","TooltipContent","realAriaLabel","as","Comp","positionDefault","style","hasAriaLabel","tooltipRect","role","getStyles","OFFSET","haventMeasuredTooltipYet","visibility","width","windowWidth","height","windowHeight","getDocumentDimensions","collisions","top","right","bottom","left","directionRight","directionUp","stateDef","nextState","nextDef","notify"],"mappings":"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","sourcesContent":["/**\n * Welcome to @reach/tooltip!\n *\n * When the user's mouse or focus rests on an element, a non-interactive popup\n * is displayed near it.\n *\n * Quick definitions:\n *\n * - \"on rest\" or \"rested on\": describes when the element receives mouse hover\n *   after a short delay (and hopefully soon, touch longpress).\n *\n * - \"activation\": describes a mouse click, keyboard enter, or keyboard space.\n *\n * Only one tooltip can be visible at a time, so we use a global state chart to\n * describe the various states and transitions between states that are\n * possible. With all the timeouts involved with tooltips it's important to\n * \"make impossible states impossible\" with a state machine.\n *\n * It's also okay to use these module globals because you don't server render\n * tooltips. None of the state is changed outside of user events.\n *\n * There are a few features that are important to understand.\n *\n * 1. Tooltips don't show up until the user has rested on one, we don't\n *    want tooltips popupping up as you move your mouse around the page.\n *\n * 2. Once any tooltip becomes visible, other tooltips nearby should skip\n *    resting and display immediately.\n *\n * 3. Tooltips stick around for a little bit after blur/mouseleave.\n *\n * TODO: Research longpress tooltips on Android, iOS\n *       - Probably want to position it by default above, since your thumb is\n *         below and would cover it\n *       - I'm thinking after longpress, display the tooltip and cancel any\n *         click events. Then on touchend, so they can read it display the\n *         tooltip for a little while longer in case their hand was\n *         obstructing the tooltip.\n *\n * @see Docs     https://reach.tech/tooltip\n * @see Source   https://github.com/reach/reach-ui/tree/main/packages/tooltip\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#tooltip\n */\n\nimport React, {\n  Children,\n  cloneElement,\n  Fragment,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { useId } from \"@reach/auto-id\";\nimport {\n  checkStyles,\n  forwardRefWithAs,\n  getOwnerDocument,\n  getDocumentDimensions,\n  makeId,\n  useForkedRef,\n  wrapEvent,\n  warning,\n} from \"@reach/utils\";\nimport Portal from \"@reach/portal\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\nimport { useRect } from \"@reach/rect\";\nimport PropTypes from \"prop-types\";\n\nexport const MOUSE_REST_TIMEOUT = 100;\nexport const LEAVE_TIMEOUT = 500;\n\n////////////////////////////////////////////////////////////////////////////////\n// States\n\n// Nothing goin' on\nconst IDLE = \"IDLE\";\n\n// We're considering showing the tooltip, but we're gonna wait a sec\nconst FOCUSED = \"FOCUSED\";\n\n// It's on!\nconst VISIBLE = \"VISIBLE\";\n\n// Focus has left, but we want to keep it visible for a sec\nconst LEAVING_VISIBLE = \"LEAVING_VISIBLE\";\n\n// The user clicked the tool, so we want to hide the thing, we can't just use\n// IDLE because we need to ignore mousemove, etc.\nconst DISMISSED = \"DISMISSED\";\n\n////////////////////////////////////////////////////////////////////////////////\n// Events\n\nconst BLUR = \"BLUR\";\nconst FOCUS = \"FOCUS\";\nconst GLOBAL_MOUSE_MOVE = \"GLOBAL_MOUSE_MOVE\";\nconst MOUSE_DOWN = \"MOUSE_DOWN\";\nconst MOUSE_ENTER = \"MOUSE_ENTER\";\nconst MOUSE_LEAVE = \"MOUSE_LEAVE\";\nconst MOUSE_MOVE = \"MOUSE_MOVE\";\nconst REST = \"REST\";\nconst SELECT_WITH_KEYBOARD = \"SELECT_WITH_KEYBOARD\";\nconst TIME_COMPLETE = \"TIME_COMPLETE\";\n\nconst chart: StateChart = {\n  initial: IDLE,\n  states: {\n    [IDLE]: {\n      enter: clearContextId,\n      on: {\n        [MOUSE_ENTER]: FOCUSED,\n        [FOCUS]: VISIBLE,\n      },\n    },\n    [FOCUSED]: {\n      enter: startRestTimer,\n      leave: clearRestTimer,\n      on: {\n        [MOUSE_MOVE]: FOCUSED,\n        [MOUSE_LEAVE]: IDLE,\n        [MOUSE_DOWN]: DISMISSED,\n        [BLUR]: IDLE,\n        [REST]: VISIBLE,\n      },\n    },\n    [VISIBLE]: {\n      on: {\n        [FOCUS]: FOCUSED,\n        [MOUSE_ENTER]: FOCUSED,\n        [MOUSE_LEAVE]: LEAVING_VISIBLE,\n        [BLUR]: LEAVING_VISIBLE,\n        [MOUSE_DOWN]: DISMISSED,\n        [SELECT_WITH_KEYBOARD]: DISMISSED,\n        [GLOBAL_MOUSE_MOVE]: LEAVING_VISIBLE,\n      },\n    },\n    [LEAVING_VISIBLE]: {\n      enter: startLeavingVisibleTimer,\n      leave: () => {\n        clearLeavingVisibleTimer();\n        clearContextId();\n      },\n      on: {\n        [MOUSE_ENTER]: VISIBLE,\n        [FOCUS]: VISIBLE,\n        [TIME_COMPLETE]: IDLE,\n      },\n    },\n    [DISMISSED]: {\n      leave: () => {\n        // allows us to come on back later w/o entering something else first\n        context.id = null;\n      },\n      on: {\n        [MOUSE_LEAVE]: IDLE,\n        [BLUR]: IDLE,\n      },\n    },\n  },\n};\n\n/*\n * Chart context allows us to persist some data around, in Tooltip all we use\n * is the id of the current tooltip being interacted with.\n */\nlet context: StateContext = { id: null };\nlet state = chart.initial;\n\n////////////////////////////////////////////////////////////////////////////////\n// Subscriptions:\n//\n// We could require apps to render a <TooltipProvider> around the app and use\n// React context to notify Tooltips of changes to our state machine, instead\n// we manage subscriptions ourselves and simplify the Tooltip API.\n//\n// Maybe if default context could take a hook (instead of just a static value)\n// that was rendered at the root for us, that'd be cool! But it doesn't.\nlet subscriptions: Function[] = [];\n\nfunction subscribe(fn: Function) {\n  subscriptions.push(fn);\n  return () => {\n    subscriptions.splice(subscriptions.indexOf(fn), 1);\n  };\n}\n\nfunction notify() {\n  subscriptions.forEach((fn) => fn(state, context));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Timeouts:\n\n// Manages when the user \"rests\" on an element. Keeps the interface from being\n// flashing tooltips all the time as the user moves the mouse around the screen.\nlet restTimeout: number;\n\nfunction startRestTimer() {\n  window.clearTimeout(restTimeout);\n  restTimeout = window.setTimeout(() => transition(REST), MOUSE_REST_TIMEOUT);\n}\n\nfunction clearRestTimer() {\n  window.clearTimeout(restTimeout);\n}\n\n// Manages the delay to hide the tooltip after rest leaves.\nlet leavingVisibleTimer: number;\n\nfunction startLeavingVisibleTimer() {\n  window.clearTimeout(leavingVisibleTimer);\n  leavingVisibleTimer = window.setTimeout(\n    () => transition(TIME_COMPLETE),\n    LEAVE_TIMEOUT\n  );\n}\n\nfunction clearLeavingVisibleTimer() {\n  window.clearTimeout(leavingVisibleTimer);\n}\n\n// allows us to come on back later w/o entering something else first after the\n// user leaves or dismisses\nfunction clearContextId() {\n  context.id = null;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * useTooltip\n *\n * @param params\n */\nexport function useTooltip<T extends HTMLElement>({\n  id: idProp,\n  onMouseEnter,\n  onMouseMove,\n  onMouseLeave,\n  onFocus,\n  onBlur,\n  onKeyDown,\n  onMouseDown,\n  ref: forwardedRef,\n  DEBUG_STYLE,\n}: {\n  ref?: React.Ref<any>;\n  DEBUG_STYLE?: boolean;\n} & React.HTMLAttributes<T> = {}): [TriggerParams, TooltipParams, boolean] {\n  let id = String(useId(idProp));\n\n  let [isVisible, setIsVisible] = useState(\n    DEBUG_STYLE\n      ? true\n      : id === null\n      ? false\n      : context.id === id && state === VISIBLE\n  );\n\n  // hopefully they always pass a ref if they ever pass one\n  let ownRef = useRef<HTMLDivElement | null>(null);\n\n  let ref = useForkedRef(forwardedRef as any, ownRef); // TODO: Fix in utils\n  let triggerRect = useRect(ownRef, isVisible);\n\n  useEffect(() => {\n    return subscribe(() => {\n      if (\n        context.id === id &&\n        (state === VISIBLE || state === LEAVING_VISIBLE)\n      ) {\n        setIsVisible(true);\n      } else {\n        setIsVisible(false);\n      }\n    });\n  }, [id]);\n\n  useEffect(() => checkStyles(\"tooltip\"), []);\n\n  useEffect(() => {\n    let ownerDocument = getOwnerDocument(ownRef.current) || document;\n    function listener(event: KeyboardEvent) {\n      if (\n        (event.key === \"Escape\" || event.key === \"Esc\") &&\n        state === VISIBLE\n      ) {\n        transition(SELECT_WITH_KEYBOARD);\n      }\n    }\n    ownerDocument.addEventListener(\"keydown\", listener);\n    return () => ownerDocument.removeEventListener(\"keydown\", listener);\n  }, []);\n\n  function handleMouseEnter() {\n    transition(MOUSE_ENTER, { id });\n  }\n\n  function handleMouseMove() {\n    transition(MOUSE_MOVE, { id });\n  }\n\n  function handleFocus() {\n    // @ts-ignore\n    if (window.__REACH_DISABLE_TOOLTIPS) {\n      return;\n    }\n    transition(FOCUS, { id });\n  }\n\n  function handleMouseLeave() {\n    transition(MOUSE_LEAVE);\n  }\n\n  function handleBlur() {\n    // Allow quick click from one tool to another\n    if (context.id !== id) return;\n    transition(BLUR);\n  }\n\n  function handleMouseDown() {\n    // Allow quick click from one tool to another\n    if (context.id !== id) return;\n    transition(MOUSE_DOWN);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<T>) {\n    if (event.key === \"Enter\" || event.key === \" \") {\n      transition(SELECT_WITH_KEYBOARD);\n    }\n  }\n\n  let trigger: TriggerParams = {\n    // The element that triggers the tooltip references the tooltip element with\n    // `aria-describedby`.\n    // https://www.w3.org/TR/wai-aria-practices-1.2/#tooltip\n    \"aria-describedby\": isVisible ? makeId(\"tooltip\", id) : undefined,\n    \"data-reach-tooltip-trigger\": \"\",\n    ref,\n    onMouseEnter: wrapEvent(onMouseEnter, handleMouseEnter),\n    onMouseMove: wrapEvent(onMouseMove, handleMouseMove),\n    onFocus: wrapEvent(onFocus, handleFocus),\n    onBlur: wrapEvent(onBlur, handleBlur),\n    onMouseLeave: wrapEvent(onMouseLeave, handleMouseLeave),\n    onKeyDown: wrapEvent(onKeyDown, handleKeyDown),\n    onMouseDown: wrapEvent(onMouseDown, handleMouseDown),\n  };\n\n  let tooltip: TooltipParams = {\n    id,\n    triggerRect,\n    isVisible,\n  };\n\n  return [trigger, tooltip, isVisible];\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Tooltip\n *\n * @see Docs https://reach.tech/tooltip#tooltip\n */\nexport const Tooltip = forwardRefWithAs<TooltipProps, \"div\">(function (\n  {\n    children,\n    label,\n    // TODO: Remove `ariaLabel` prop in 1.0 and just use `aria-label`\n    ariaLabel: DEPRECATED_ariaLabel,\n    id,\n    DEBUG_STYLE,\n    ...props\n  },\n  forwardedRef\n) {\n  let child = Children.only(children) as any;\n\n  warning(\n    !DEPRECATED_ariaLabel,\n    \"The `ariaLabel prop is deprecated and will be removed from @reach/tooltip in a future version. Please use `aria-label` instead.\"\n  );\n\n  // We need to pass some properties from the child into useTooltip\n  // to make sure users can maintain control over the trigger's ref and events\n  let [trigger, tooltip] = useTooltip({\n    id,\n    onMouseEnter: child.props.onMouseEnter,\n    onMouseMove: child.props.onMouseMove,\n    onMouseLeave: child.props.onMouseLeave,\n    onFocus: child.props.onFocus,\n    onBlur: child.props.onBlur,\n    onKeyDown: child.props.onKeyDown,\n    onMouseDown: child.props.onMouseDown,\n    ref: child.ref,\n    DEBUG_STYLE,\n  });\n  return (\n    <Fragment>\n      {cloneElement(child, trigger as any)}\n      <TooltipPopup\n        ref={forwardedRef}\n        label={label}\n        aria-label={DEPRECATED_ariaLabel}\n        {...tooltip}\n        {...props}\n      />\n    </Fragment>\n  );\n});\n\nexport type TooltipProps = {\n  children: React.ReactNode;\n  DEBUG_STYLE?: boolean;\n} & Omit<TooltipContentProps, \"triggerRect\" | \"isVisible\">;\n\nif (__DEV__) {\n  Tooltip.displayName = \"Tooltip\";\n  Tooltip.propTypes = {\n    children: PropTypes.node.isRequired,\n    label: PropTypes.node.isRequired,\n    ariaLabel: PropTypes.string,\n  };\n}\n\nexport default Tooltip;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * TooltipPopup\n *\n * @see Docs https://reach.tech/tooltip#tooltippopup\n */\nexport const TooltipPopup = forwardRefWithAs<TooltipPopupProps, \"div\">(\n  function TooltipPopup(\n    {\n      // could use children but we want to encourage simple strings\n      label,\n      // TODO: Remove `ariaLabel` prop in 1.0 and just use `aria-label`\n      ariaLabel: DEPRECATED_ariaLabel,\n      isVisible,\n      id,\n      ...props\n    },\n    forwardRef\n  ) {\n    return isVisible ? (\n      <Portal>\n        <TooltipContent\n          ref={forwardRef}\n          label={label}\n          aria-label={DEPRECATED_ariaLabel}\n          isVisible={isVisible}\n          {...props}\n          id={makeId(\"tooltip\", String(id))}\n        />\n      </Portal>\n    ) : null;\n  }\n);\n\nexport type TooltipPopupProps = {\n  children?: React.ReactNode;\n} & TooltipContentProps;\n\nif (__DEV__) {\n  TooltipPopup.displayName = \"TooltipPopup\";\n  TooltipPopup.propTypes = {\n    label: PropTypes.node.isRequired,\n    ariaLabel: PropTypes.string,\n    position: PropTypes.func,\n  };\n}\n\n/**\n * TooltipContent\n *\n * We need a separate component so that useRect works inside the portal.\n *\n * @see Docs https://reach.tech/tooltip#tooltipcontent\n */\nconst TooltipContent = forwardRefWithAs<TooltipContentProps, \"div\">(\n  function TooltipContent(\n    {\n      // TODO: Remove `ariaLabel` prop in 1.0 and just use `aria-label`\n      ariaLabel,\n      \"aria-label\": realAriaLabel,\n      as: Comp = \"div\",\n      id,\n      isVisible,\n      label,\n      position = positionDefault,\n      style,\n      triggerRect,\n      ...props\n    },\n    forwardedRef\n  ) {\n    // The element that serves as the tooltip container has role tooltip.\n    // https://www.w3.org/TR/wai-aria-practices-1.2/#tooltip\n    // When an app passes an `aria-label`, we actually want to implement\n    // `role=\"tooltip\"` on a visually hidden element inside of the trigger.\n    // In these cases we want the screen reader user to know both the content in\n    // the tooltip, but also the content in the badge. For screen reader users,\n    // the only content announced to them is whatever is in the tooltip.\n    let hasAriaLabel = (realAriaLabel || ariaLabel) != null;\n\n    let ownRef = useRef(null);\n    let ref = useForkedRef(forwardedRef, ownRef);\n    let tooltipRect = useRect(ownRef, isVisible);\n    return (\n      <Fragment>\n        <Comp\n          role={hasAriaLabel ? undefined : \"tooltip\"}\n          {...props}\n          ref={ref}\n          data-reach-tooltip=\"\"\n          id={hasAriaLabel ? undefined : id}\n          style={{\n            ...style,\n            ...getStyles(position, triggerRect as PRect, tooltipRect as PRect),\n          }}\n        >\n          {label}\n        </Comp>\n        {hasAriaLabel && (\n          <VisuallyHidden role=\"tooltip\" id={id}>\n            {realAriaLabel || ariaLabel}\n          </VisuallyHidden>\n        )}\n      </Fragment>\n    );\n  }\n);\n\nexport type TooltipContentProps = {\n  ariaLabel?: string;\n  position?: Position;\n  label: React.ReactNode;\n  isVisible?: boolean;\n  triggerRect: DOMRect | null;\n};\n\nif (__DEV__) {\n  TooltipContent.displayName = \"TooltipContent\";\n  TooltipContent.propTypes = {};\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n// feels awkward when it's perfectly aligned w/ the trigger\nconst OFFSET = 8;\n\nfunction getStyles(\n  position: Position,\n  triggerRect: PRect,\n  tooltipRect: PRect\n): React.CSSProperties {\n  let haventMeasuredTooltipYet = !tooltipRect;\n  if (haventMeasuredTooltipYet) {\n    return { visibility: \"hidden\" };\n  }\n  return position(triggerRect, tooltipRect);\n}\n\nlet positionDefault: Position = (triggerRect, tooltipRect) => {\n  let { width: windowWidth, height: windowHeight } = getDocumentDimensions();\n  if (!triggerRect || !tooltipRect) {\n    return {};\n  }\n\n  let collisions = {\n    top: triggerRect.top - tooltipRect.height < 0,\n    right: windowWidth < triggerRect.left + tooltipRect.width,\n    bottom: windowHeight < triggerRect.bottom + tooltipRect.height + OFFSET,\n    left: triggerRect.left - tooltipRect.width < 0,\n  };\n\n  let directionRight = collisions.right && !collisions.left;\n  let directionUp = collisions.bottom && !collisions.top;\n\n  return {\n    left: directionRight\n      ? `${triggerRect.right - tooltipRect.width + window.pageXOffset}px`\n      : `${triggerRect.left + window.pageXOffset}px`,\n    top: directionUp\n      ? `${\n          triggerRect.top - OFFSET - tooltipRect.height + window.pageYOffset\n        }px`\n      : `${\n          triggerRect.top + OFFSET + triggerRect.height + window.pageYOffset\n        }px`,\n  };\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Finds the next state from the current state + action. If the chart doesn't\n * describe that transition, it will throw.\n *\n * It also manages lifecycles of the machine, (enter/leave hooks on the state\n * chart)\n *\n * @param event\n * @param payload\n */\nconst transition: Transition = (event, payload) => {\n  let stateDef = chart.states[state];\n  let nextState = stateDef && stateDef.on && stateDef.on[event];\n\n  // Really useful for debugging\n  // console.log({ event, state, nextState, contextId: context.id });\n  // !nextState && console.log('no transition taken')\n\n  if (!nextState) {\n    return;\n  }\n\n  if (stateDef && stateDef.leave) {\n    stateDef.leave();\n  }\n\n  if (payload) {\n    context = payload;\n  }\n\n  let nextDef = chart.states[nextState];\n  if (nextDef && nextDef.enter) {\n    nextDef.enter();\n  }\n\n  state = nextState;\n  notify();\n};\n\n////////////////////////////////////////////////////////////////////////////////\n// TYPES\n\nexport interface TriggerParams {\n  \"aria-describedby\"?: string | undefined;\n  \"data-reach-tooltip-trigger\": string;\n  ref: React.Ref<any>;\n  onMouseEnter: React.ReactEventHandler;\n  onMouseMove: React.ReactEventHandler;\n  onFocus: React.ReactEventHandler;\n  onBlur: React.ReactEventHandler;\n  onMouseLeave: React.ReactEventHandler;\n  onKeyDown: React.ReactEventHandler;\n  onMouseDown: React.ReactEventHandler;\n}\n\nexport interface TooltipParams {\n  id: string;\n  triggerRect: DOMRect | null;\n  isVisible: boolean;\n}\n\ntype Transition = (event: MachineEventType, payload?: any) => any;\n\ntype State = \"IDLE\" | \"FOCUSED\" | \"VISIBLE\" | \"LEAVING_VISIBLE\" | \"DISMISSED\";\n\ntype MachineEventType =\n  | \"BLUR\"\n  | \"FOCUS\"\n  | \"GLOBAL_MOUSE_MOVE\"\n  | \"MOUSE_DOWN\"\n  | \"MOUSE_ENTER\"\n  | \"MOUSE_LEAVE\"\n  | \"MOUSE_MOVE\"\n  | \"REST\"\n  | \"SELECT_WITH_KEYBOARD\"\n  | \"TIME_COMPLETE\";\n\ninterface StateChart {\n  initial: State;\n  states: {\n    [key in State]?: {\n      enter?: Function;\n      leave?: Function;\n      on: {\n        [key in MachineEventType]?: State;\n      };\n    };\n  };\n}\n\ntype StateContext = {\n  id?: string | null;\n};\n\nexport type Position = (\n  targetRect?: PRect | null,\n  popoverRect?: PRect | null\n) => React.CSSProperties;\n\ntype PRect = Partial<DOMRect> & {\n  readonly bottom: number;\n  readonly height: number;\n  readonly left: number;\n  readonly right: number;\n  readonly top: number;\n  readonly width: number;\n};\n"]},"metadata":{},"sourceType":"module"}