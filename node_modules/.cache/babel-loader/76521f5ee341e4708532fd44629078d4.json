{"ast":null,"code":"\"use strict\";\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.interceptClientRequest = void 0;\n\nvar http_1 = __importDefault(require(\"http\"));\n\nvar https_1 = __importDefault(require(\"https\"));\n\nvar ClientRequestOverride_1 = require(\"./ClientRequestOverride\");\n\nvar debug = require('debug')('http override'); // Store a pointer to the original `http.ClientRequest` class\n// so it can be mutated during runtime, affecting any subsequent calls.\n\n\nvar originalClientRequest;\n\nfunction handleRequest(protocol, originalMethod, middleware, args) {\n  var _a; //The first time we execute this, I'll save the original ClientRequest.\n  //This because is used to restore the dafault one later\n\n\n  if (!originalClientRequest) {\n    originalClientRequest = http_1[\"default\"].ClientRequest;\n  }\n\n  var ClientRequestOverride = ClientRequestOverride_1.createClientRequestOverrideClass(middleware, originalMethod, originalClientRequest);\n  debug('patching native http.ClientRequest...'); //Only http.ClientRequest is overridden because https uses http\n  //@ts-ignore\n\n  http_1[\"default\"].ClientRequest = ClientRequestOverride;\n  debug('new http.ClientRequest (origin: %s)', protocol); // @ts-ignore\n\n  return new ((_a = http_1[\"default\"].ClientRequest).bind.apply(_a, __spreadArrays([void 0], args)))();\n}\n/**\n * Intercepts requests issued by native `http` and `https` modules.\n */\n\n\nexports.interceptClientRequest = function (middleware) {\n  var patchedModules = {};\n  var modules = ['http', 'https'];\n  modules.forEach(function (protocol) {\n    var requestModule = protocol === 'https' ? https_1[\"default\"] : http_1[\"default\"];\n    var originalRequest = requestModule.request,\n        originalGet = requestModule.get; // Wrap an original `http.request`/`https.request`\n    // so that its invocations can be debugged.\n\n    function proxiedOriginalRequest() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      debug('%s.request original call', protocol); // @ts-ignore\n\n      return originalRequest.apply(void 0, args);\n    }\n\n    debug('patching \"%s\" module...', protocol); // @ts-ignore\n\n    requestModule.request = function requestOverride() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      debug('%s.request proxy call', protocol);\n      return handleRequest(protocol, proxiedOriginalRequest.bind(requestModule), middleware, args);\n    }; // @ts-ignore\n\n\n    requestModule.get = function getOverride() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      debug('%s.get call', protocol);\n      var req = handleRequest(protocol, originalGet.bind(requestModule), middleware, args);\n      req.end();\n      return req;\n    };\n\n    patchedModules[protocol] = {\n      requestModule: requestModule,\n      request: originalRequest,\n      get: originalGet\n    };\n  });\n  return function () {\n    debug('restoring patches...');\n    Object.values(patchedModules).forEach(function (_a) {\n      var requestModule = _a.requestModule,\n          request = _a.request,\n          get = _a.get;\n      requestModule.request = request;\n      requestModule.get = get;\n    });\n    patchedModules = {};\n  };\n};","map":{"version":3,"sources":["../../../src/interceptors/ClientRequest/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,IAAA,uBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAEA,IAAM,KAAK,GAAG,OAAO,CAAC,OAAD,CAAP,CAAiB,eAAjB,CAAd,C,CAWA;AACA;;;AACA,IAAI,qBAAJ;;AAEA,SAAS,aAAT,CACE,QADF,EAEE,cAFF,EAGE,UAHF,EAIE,IAJF,EAIa;SAAA,CAEX;AACA;;;AACA,MAAI,CAAC,qBAAL,EAA4B;AAC1B,IAAA,qBAAqB,GAAG,MAAA,WAAA,CAAK,aAA7B;AACD;;AAED,MAAM,qBAAqB,GAAG,uBAAA,CAAA,gCAAA,CAC5B,UAD4B,EAE5B,cAF4B,EAG5B,qBAH4B,CAA9B;AAKA,EAAA,KAAK,CAAC,uCAAD,CAAL,CAbW,CAcX;AACA;;AACA,EAAA,MAAA,WAAA,CAAK,aAAL,GAAqB,qBAArB;AAEA,EAAA,KAAK,CAAC,qCAAD,EAAwC,QAAxC,CAAL,CAlBW,CAoBX;;AACA,SAAA,KAAW,CAAA,EAAA,GAAA,MAAA,WAAA,CAAK,aAAL,EAAkB,IAAlB,CAAkB,KAAlB,CAAkB,EAAlB,EAAkB,cAAA,CAAA,CAAA,KAAA,CAAA,CAAA,EAAI,IAAJ,CAAlB,CAAX,GAAA;AACD;AAED;;AAEG;;;AACU,OAAA,CAAA,sBAAA,GAAsC,UAAC,UAAD,EAAW;AAC5D,MAAI,cAAc,GAAmB,EAArC;AACA,MAAM,OAAO,GAAG,CAAC,MAAD,EAAS,OAAT,CAAhB;AAEA,EAAA,OAAO,CAAC,OAAR,CAAgB,UAAC,QAAD,EAAS;AACvB,QAAM,aAAa,GAAG,QAAQ,KAAK,OAAb,GAAuB,OAAA,WAAvB,GAA+B,MAAA,WAArD;AAEQ,QAAS,eAAe,GAAuB,aAAa,CAApC,OAAxB;AAAA,QAA+B,WAAW,GAAK,aAAa,CAAlB,GAA1C,CAHe,CAKvB;AACA;;AACA,aAAS,sBAAT,GAA+B;AAAC,UAAA,IAAA,GAAA,EAAA;;WAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,QAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAC9B,MAAA,KAAK,CAAC,0BAAD,EAA6B,QAA7B,CAAL,CAD6B,CAG7B;;AACA,aAAO,eAAe,CAAA,KAAf,CAAe,KAAA,CAAf,EAAmB,IAAnB,CAAP;AACD;;AAED,IAAA,KAAK,CAAC,yBAAD,EAA4B,QAA5B,CAAL,CAduB,CAgBvB;;AACA,IAAA,aAAa,CAAC,OAAd,GAAwB,SAAS,eAAT,GAAwB;AAAC,UAAA,IAAA,GAAA,EAAA;;WAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,QAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAC/C,MAAA,KAAK,CAAC,uBAAD,EAA0B,QAA1B,CAAL;AAEA,aAAO,aAAa,CAClB,QADkB,EAElB,sBAAsB,CAAC,IAAvB,CAA4B,aAA5B,CAFkB,EAGlB,UAHkB,EAIlB,IAJkB,CAApB;AAMD,KATD,CAjBuB,CA4BvB;;;AACA,IAAA,aAAa,CAAC,GAAd,GAAoB,SAAS,WAAT,GAAoB;AAAC,UAAA,IAAA,GAAA,EAAA;;WAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,QAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACvC,MAAA,KAAK,CAAC,aAAD,EAAgB,QAAhB,CAAL;AAEA,UAAM,GAAG,GAAG,aAAa,CACvB,QADuB,EAEvB,WAAW,CAAC,IAAZ,CAAiB,aAAjB,CAFuB,EAGvB,UAHuB,EAIvB,IAJuB,CAAzB;AAMA,MAAA,GAAG,CAAC,GAAJ;AAEA,aAAO,GAAP;AACD,KAZD;;AAcA,IAAA,cAAc,CAAC,QAAD,CAAd,GAA2B;AACzB,MAAA,aAAa,EAAA,aADY;AAEzB,MAAA,OAAO,EAAE,eAFgB;AAGzB,MAAA,GAAG,EAAE;AAHoB,KAA3B;AAKD,GAhDD;AAkDA,SAAO,YAAA;AACL,IAAA,KAAK,CAAC,sBAAD,CAAL;AAEA,IAAA,MAAM,CAAC,MAAP,CAAc,cAAd,EAA8B,OAA9B,CAAsC,UAAC,EAAD,EAAgC;UAA7B,aAAa,GAAA,EAAA,CAAA,a;UAAE,OAAO,GAAA,EAAA,CAAA,O;UAAE,GAAG,GAAA,EAAA,CAAA,G;AAClE,MAAA,aAAa,CAAC,OAAd,GAAwB,OAAxB;AACA,MAAA,aAAa,CAAC,GAAd,GAAoB,GAApB;AACD,KAHD;AAKA,IAAA,cAAc,GAAG,EAAjB;AACD,GATD;AAUD,CAhEY","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.interceptClientRequest = void 0;\nvar http_1 = __importDefault(require(\"http\"));\nvar https_1 = __importDefault(require(\"https\"));\nvar ClientRequestOverride_1 = require(\"./ClientRequestOverride\");\nvar debug = require('debug')('http override');\n// Store a pointer to the original `http.ClientRequest` class\n// so it can be mutated during runtime, affecting any subsequent calls.\nvar originalClientRequest;\nfunction handleRequest(protocol, originalMethod, middleware, args) {\n    var _a;\n    //The first time we execute this, I'll save the original ClientRequest.\n    //This because is used to restore the dafault one later\n    if (!originalClientRequest) {\n        originalClientRequest = http_1.default.ClientRequest;\n    }\n    var ClientRequestOverride = ClientRequestOverride_1.createClientRequestOverrideClass(middleware, originalMethod, originalClientRequest);\n    debug('patching native http.ClientRequest...');\n    //Only http.ClientRequest is overridden because https uses http\n    //@ts-ignore\n    http_1.default.ClientRequest = ClientRequestOverride;\n    debug('new http.ClientRequest (origin: %s)', protocol);\n    // @ts-ignore\n    return new ((_a = http_1.default.ClientRequest).bind.apply(_a, __spreadArrays([void 0], args)))();\n}\n/**\n * Intercepts requests issued by native `http` and `https` modules.\n */\nexports.interceptClientRequest = function (middleware) {\n    var patchedModules = {};\n    var modules = ['http', 'https'];\n    modules.forEach(function (protocol) {\n        var requestModule = protocol === 'https' ? https_1.default : http_1.default;\n        var originalRequest = requestModule.request, originalGet = requestModule.get;\n        // Wrap an original `http.request`/`https.request`\n        // so that its invocations can be debugged.\n        function proxiedOriginalRequest() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            debug('%s.request original call', protocol);\n            // @ts-ignore\n            return originalRequest.apply(void 0, args);\n        }\n        debug('patching \"%s\" module...', protocol);\n        // @ts-ignore\n        requestModule.request = function requestOverride() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            debug('%s.request proxy call', protocol);\n            return handleRequest(protocol, proxiedOriginalRequest.bind(requestModule), middleware, args);\n        };\n        // @ts-ignore\n        requestModule.get = function getOverride() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            debug('%s.get call', protocol);\n            var req = handleRequest(protocol, originalGet.bind(requestModule), middleware, args);\n            req.end();\n            return req;\n        };\n        patchedModules[protocol] = {\n            requestModule: requestModule,\n            request: originalRequest,\n            get: originalGet,\n        };\n    });\n    return function () {\n        debug('restoring patches...');\n        Object.values(patchedModules).forEach(function (_a) {\n            var requestModule = _a.requestModule, request = _a.request, get = _a.get;\n            requestModule.request = request;\n            requestModule.get = get;\n        });\n        patchedModules = {};\n    };\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}