{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createClientRequestOverrideClass = void 0;\n\nvar util_1 = require(\"util\");\n\nvar http_1 = __importDefault(require(\"http\"));\n\nvar until_1 = require(\"@open-draft/until\");\n\nvar headers_utils_1 = require(\"headers-utils\");\n\nvar SocketPolyfill_1 = require(\"./polyfills/SocketPolyfill\");\n/* Utils */\n\n\nvar getUrlByRequestOptions_1 = require(\"../../utils/getUrlByRequestOptions\");\n\nvar bodyBufferToString_1 = require(\"./utils/bodyBufferToString\");\n\nvar concatChunkToBuffer_1 = require(\"./utils/concatChunkToBuffer\");\n\nvar inheritRequestHeaders_1 = require(\"./utils/inheritRequestHeaders\");\n\nvar normalizeHttpRequestParams_1 = require(\"./utils/normalizeHttpRequestParams\");\n\nvar normalizeHttpRequestEndParams_1 = require(\"./utils/normalizeHttpRequestEndParams\");\n\nvar createDebug = require('debug');\n\nfunction createClientRequestOverrideClass(middleware, performOriginalRequest, originalClientRequest) {\n  function ClientRequestOverride() {\n    var _this = this;\n\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var _b = normalizeHttpRequestParams_1.normalizeHttpRequestParams.apply(void 0, args),\n        url = _b[0],\n        options = _b[1],\n        callback = _b[2];\n\n    var usesHttps = url.protocol === 'https:';\n    var requestBodyBuffer = [];\n    var debug = createDebug(\"http \" + options.method + \" \" + url.href); // Inherit ClientRequest properties from RequestOptions.\n\n    this.method = options.method || 'GET';\n    this.path = options.path || getUrlByRequestOptions_1.DEFAULT_PATH;\n    debug('intercepted %s %s (%s)', options.method, url.href, url.protocol);\n    http_1[\"default\"].OutgoingMessage.call(this); // Propagate options headers to the request instance.\n\n    inheritRequestHeaders_1.inheritRequestHeaders(this, options.headers);\n    var socket = new SocketPolyfill_1.SocketPolyfill(options, {\n      usesHttps: usesHttps\n    });\n    this.socket = this.connection = socket;\n\n    if (options.timeout) {\n      debug('setting socket timeout to %a', options.timeout);\n      socket.setTimeout(options.timeout);\n    } // Create a mocked response instance.\n\n\n    var response = new http_1[\"default\"].IncomingMessage(socket);\n\n    if (((_a = options.headers) === null || _a === void 0 ? void 0 : _a.expect) === '100-continue') {\n      debug('encountered \"100 Continue\" header');\n      this.emit('continue');\n    }\n\n    process.nextTick(function () {\n      _this.emit('socket', socket);\n\n      socket.emit('connect');\n\n      if (socket.authorized) {\n        debug('emitting authorized socket event');\n        socket.emit('secureConnect');\n      }\n    });\n\n    if (callback) {\n      this.once('response', callback);\n    }\n\n    var emitError = function emitError(error) {\n      process.nextTick(function () {\n        _this.emit('error', error);\n      });\n    };\n\n    this.write = function (chunk) {\n      var args = [];\n\n      for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n      }\n\n      debug('write', chunk, args);\n      var callback = typeof args[1] === 'function' ? args[1] : args[2];\n\n      if (_this.aborted) {\n        debug('cannot write: request aborted');\n        emitError(new Error('Request aborted'));\n      } else {\n        if (chunk) {\n          debug('request write: concat chunk to buffer', chunk);\n          requestBodyBuffer = concatChunkToBuffer_1.concatChunkToBuffer(chunk, requestBodyBuffer);\n        }\n\n        if (typeof callback === 'function') {\n          callback();\n        }\n      }\n\n      setImmediate(function () {\n        _this.emit('drain');\n      });\n      return false;\n    };\n\n    this.end = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, chunk, encoding, callback, writtenRequestBody, resolvedRequestBody, outHeaders, resolvedRequestHeaders, requestHeaders, formattedRequest, _b, middlewareException, mockedResponse, _c, headers, req, ClientRequest;\n\n        var _this = this;\n\n        return __generator(this, function (_d) {\n          switch (_d.label) {\n            case 0:\n              _a = normalizeHttpRequestEndParams_1.normalizeHttpRequestEndParams.apply(void 0, args), chunk = _a[0], encoding = _a[1], callback = _a[2];\n              debug('end', {\n                chunk: chunk,\n                encoding: encoding,\n                callback: callback\n              });\n              debug('request headers', options.headers);\n              writtenRequestBody = bodyBufferToString_1.bodyBufferToString(Buffer.concat(requestBodyBuffer));\n              debug('request written body', writtenRequestBody);\n              resolvedRequestBody = bodyBufferToString_1.bodyBufferToString(Buffer.concat(chunk ? concatChunkToBuffer_1.concatChunkToBuffer(chunk, requestBodyBuffer) : requestBodyBuffer));\n              debug('request resolved body', resolvedRequestBody);\n              outHeaders = this.getHeaders();\n              resolvedRequestHeaders = Object.assign({}, outHeaders, options.headers);\n              requestHeaders = resolvedRequestHeaders ? headers_utils_1.reduceHeadersObject(resolvedRequestHeaders, function (headers, name, value) {\n                headers[name.toLowerCase()] = value;\n                return headers;\n              }, {}) : {};\n              debug('request headers', requestHeaders);\n              formattedRequest = {\n                url: url,\n                method: options.method || 'GET',\n                headers: requestHeaders,\n                body: resolvedRequestBody\n              };\n              debug('awaiting mocked response...');\n              return [4\n              /*yield*/\n              , until_1.until(function () {\n                return __awaiter(_this, void 0, void 0, function () {\n                  return __generator(this, function (_a) {\n                    return [2\n                    /*return*/\n                    , middleware(formattedRequest, response)];\n                  });\n                });\n              }) // When the request middleware throws an exception, error the request.\n              // This cancels the request and is similar to a network error.\n              ];\n\n            case 1:\n              _b = _d.sent(), middlewareException = _b[0], mockedResponse = _b[1]; // When the request middleware throws an exception, error the request.\n              // This cancels the request and is similar to a network error.\n\n              if (middlewareException) {\n                debug('middleware function threw an exception!', middlewareException);\n                this.emit('error', middlewareException);\n                return [2\n                /*return*/\n                , this];\n              }\n\n              if (mockedResponse) {\n                debug('received mocked response:', mockedResponse); // Prevent modifying an already finished response.\n\n                if (!response.complete) {\n                  _c = mockedResponse.headers, headers = _c === void 0 ? {} : _c;\n                  response.statusCode = mockedResponse.status;\n                  response.statusMessage = mockedResponse.statusText;\n                  debug('writing response headers...'); // Converts mocked response headers to actual headers\n                  // (lowercases header names and merges duplicates).\n\n                  response.headers = Object.entries(headers).reduce(function (acc, _a) {\n                    var name = _a[0],\n                        value = _a[1];\n                    var headerName = name.toLowerCase();\n                    var headerValue = acc.hasOwnProperty(headerName) ? [].concat(acc[headerName], value) : value;\n                    acc[headerName] = headerValue;\n                    return acc;\n                  }, {}); // Converts mocked response headers to raw headers.\n                  // @see https://nodejs.org/api/http.html#http_message_rawheaders\n\n                  response.rawHeaders = Object.entries(headers).reduce(function (acc, _a) {\n                    var name = _a[0],\n                        value = _a[1];\n                    return acc.concat(name, value);\n                  }, []);\n\n                  if (mockedResponse.body) {\n                    debug('writing response body...');\n                    response.push(Buffer.from(mockedResponse.body));\n                  }\n                }\n\n                debug('response is complete, finishing request...'); // Invoke the \"req.end()\" callback.\n\n                callback === null || callback === void 0 ? void 0 : callback();\n                this.finished = true;\n                this.emit('finish');\n                this.emit('response', response); // Pushing `null` indicates that the response body is complete\n                // and must not be modified anymore.\n\n                response.push(null);\n                response.complete = true;\n                return [2\n                /*return*/\n                , this];\n              }\n\n              debug('no mocked response received');\n              debug('performing original %s %s (%s)', options.method, url.href, url.protocol);\n              debug('original request options', options);\n              debug('original request body (written)', writtenRequestBody);\n              debug('original request body (end)', chunk);\n              debug('using', performOriginalRequest); // Decide whether to use HTTPS based on the URL protocol.\n              // XHR can trigger http.request for HTTPS URL.\n\n              if (url.protocol === 'https:') {\n                debug('reverting patches...');\n                ClientRequest = http_1[\"default\"].ClientRequest; // @ts-ignore\n\n                http_1[\"default\"].ClientRequest = originalClientRequest;\n                req = performOriginalRequest(options);\n                debug('re-applying patches...'); // @ts-ignore\n\n                http_1[\"default\"].ClientRequest = ClientRequest;\n              } else {\n                req = performOriginalRequest(options);\n              } // Propagate headers set after `ClientRequest` is constructed\n              // onto the original request instance.\n\n\n              inheritRequestHeaders_1.inheritRequestHeaders(req, outHeaders); // Propagate a request body buffer written via `req.write()`\n              // to the original request.\n\n              if (requestBodyBuffer.length > 0 && req.writable) {\n                req.write(Buffer.concat(requestBodyBuffer));\n              }\n\n              req.on('finish', function () {\n                _this.emit('finish');\n              });\n              req.on('response', function (response) {\n                debug(response.statusCode, options.method, url.href);\n\n                _this.emit('response', response);\n              });\n              req.on('error', function (error) {\n                debug('original request error', error);\n\n                _this.emit('error', error);\n              }); // Provide a callback when an original request is finished,\n              // so it can be debugged.\n\n              req.end.apply(req, [chunk, encoding, function () {\n                debug('request ended', _this.method, url.href);\n                callback === null || callback === void 0 ? void 0 : callback();\n              }].filter(Boolean));\n              return [2\n              /*return*/\n              , req];\n          }\n        });\n      });\n    };\n\n    this.abort = function () {\n      debug('abort');\n\n      if (_this.aborted) {\n        debug('already aborted');\n        return;\n      }\n\n      _this.aborted = Date.now();\n      var error = new Error();\n      error.code = 'aborted';\n      response.emit('close', error);\n      socket.destroy();\n\n      _this.emit('abort');\n    };\n\n    return this;\n  }\n\n  util_1.inherits(ClientRequestOverride, originalClientRequest);\n  return ClientRequestOverride;\n}\n\nexports.createClientRequestOverrideClass = createClientRequestOverrideClass;","map":{"version":3,"sources":["../../../src/interceptors/ClientRequest/ClientRequestOverride.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createClientRequestOverrideClass = void 0;\nvar util_1 = require(\"util\");\nvar http_1 = __importDefault(require(\"http\"));\nvar until_1 = require(\"@open-draft/until\");\nvar headers_utils_1 = require(\"headers-utils\");\nvar SocketPolyfill_1 = require(\"./polyfills/SocketPolyfill\");\n/* Utils */\nvar getUrlByRequestOptions_1 = require(\"../../utils/getUrlByRequestOptions\");\nvar bodyBufferToString_1 = require(\"./utils/bodyBufferToString\");\nvar concatChunkToBuffer_1 = require(\"./utils/concatChunkToBuffer\");\nvar inheritRequestHeaders_1 = require(\"./utils/inheritRequestHeaders\");\nvar normalizeHttpRequestParams_1 = require(\"./utils/normalizeHttpRequestParams\");\nvar normalizeHttpRequestEndParams_1 = require(\"./utils/normalizeHttpRequestEndParams\");\nvar createDebug = require('debug');\nfunction createClientRequestOverrideClass(middleware, performOriginalRequest, originalClientRequest) {\n    function ClientRequestOverride() {\n        var _this = this;\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _b = normalizeHttpRequestParams_1.normalizeHttpRequestParams.apply(void 0, args), url = _b[0], options = _b[1], callback = _b[2];\n        var usesHttps = url.protocol === 'https:';\n        var requestBodyBuffer = [];\n        var debug = createDebug(\"http \" + options.method + \" \" + url.href);\n        // Inherit ClientRequest properties from RequestOptions.\n        this.method = options.method || 'GET';\n        this.path = options.path || getUrlByRequestOptions_1.DEFAULT_PATH;\n        debug('intercepted %s %s (%s)', options.method, url.href, url.protocol);\n        http_1.default.OutgoingMessage.call(this);\n        // Propagate options headers to the request instance.\n        inheritRequestHeaders_1.inheritRequestHeaders(this, options.headers);\n        var socket = new SocketPolyfill_1.SocketPolyfill(options, {\n            usesHttps: usesHttps,\n        });\n        this.socket = this.connection = socket;\n        if (options.timeout) {\n            debug('setting socket timeout to %a', options.timeout);\n            socket.setTimeout(options.timeout);\n        }\n        // Create a mocked response instance.\n        var response = new http_1.default.IncomingMessage(socket);\n        if (((_a = options.headers) === null || _a === void 0 ? void 0 : _a.expect) === '100-continue') {\n            debug('encountered \"100 Continue\" header');\n            this.emit('continue');\n        }\n        process.nextTick(function () {\n            _this.emit('socket', socket);\n            socket.emit('connect');\n            if (socket.authorized) {\n                debug('emitting authorized socket event');\n                socket.emit('secureConnect');\n            }\n        });\n        if (callback) {\n            this.once('response', callback);\n        }\n        var emitError = function (error) {\n            process.nextTick(function () {\n                _this.emit('error', error);\n            });\n        };\n        this.write = function (chunk) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            debug('write', chunk, args);\n            var callback = typeof args[1] === 'function' ? args[1] : args[2];\n            if (_this.aborted) {\n                debug('cannot write: request aborted');\n                emitError(new Error('Request aborted'));\n            }\n            else {\n                if (chunk) {\n                    debug('request write: concat chunk to buffer', chunk);\n                    requestBodyBuffer = concatChunkToBuffer_1.concatChunkToBuffer(chunk, requestBodyBuffer);\n                }\n                if (typeof callback === 'function') {\n                    callback();\n                }\n            }\n            setImmediate(function () {\n                _this.emit('drain');\n            });\n            return false;\n        };\n        this.end = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return __awaiter(_this, void 0, void 0, function () {\n                var _a, chunk, encoding, callback, writtenRequestBody, resolvedRequestBody, outHeaders, resolvedRequestHeaders, requestHeaders, formattedRequest, _b, middlewareException, mockedResponse, _c, headers, req, ClientRequest;\n                var _this = this;\n                return __generator(this, function (_d) {\n                    switch (_d.label) {\n                        case 0:\n                            _a = normalizeHttpRequestEndParams_1.normalizeHttpRequestEndParams.apply(void 0, args), chunk = _a[0], encoding = _a[1], callback = _a[2];\n                            debug('end', { chunk: chunk, encoding: encoding, callback: callback });\n                            debug('request headers', options.headers);\n                            writtenRequestBody = bodyBufferToString_1.bodyBufferToString(Buffer.concat(requestBodyBuffer));\n                            debug('request written body', writtenRequestBody);\n                            resolvedRequestBody = bodyBufferToString_1.bodyBufferToString(Buffer.concat(chunk\n                                ? concatChunkToBuffer_1.concatChunkToBuffer(chunk, requestBodyBuffer)\n                                : requestBodyBuffer));\n                            debug('request resolved body', resolvedRequestBody);\n                            outHeaders = this.getHeaders();\n                            resolvedRequestHeaders = Object.assign({}, outHeaders, options.headers);\n                            requestHeaders = resolvedRequestHeaders\n                                ? headers_utils_1.reduceHeadersObject(resolvedRequestHeaders, function (headers, name, value) {\n                                    headers[name.toLowerCase()] = value;\n                                    return headers;\n                                }, {})\n                                : {};\n                            debug('request headers', requestHeaders);\n                            formattedRequest = {\n                                url: url,\n                                method: options.method || 'GET',\n                                headers: requestHeaders,\n                                body: resolvedRequestBody,\n                            };\n                            debug('awaiting mocked response...');\n                            return [4 /*yield*/, until_1.until(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\n                                    return [2 /*return*/, middleware(formattedRequest, response)];\n                                }); }); })\n                                // When the request middleware throws an exception, error the request.\n                                // This cancels the request and is similar to a network error.\n                            ];\n                        case 1:\n                            _b = _d.sent(), middlewareException = _b[0], mockedResponse = _b[1];\n                            // When the request middleware throws an exception, error the request.\n                            // This cancels the request and is similar to a network error.\n                            if (middlewareException) {\n                                debug('middleware function threw an exception!', middlewareException);\n                                this.emit('error', middlewareException);\n                                return [2 /*return*/, this];\n                            }\n                            if (mockedResponse) {\n                                debug('received mocked response:', mockedResponse);\n                                // Prevent modifying an already finished response.\n                                if (!response.complete) {\n                                    _c = mockedResponse.headers, headers = _c === void 0 ? {} : _c;\n                                    response.statusCode = mockedResponse.status;\n                                    response.statusMessage = mockedResponse.statusText;\n                                    debug('writing response headers...');\n                                    // Converts mocked response headers to actual headers\n                                    // (lowercases header names and merges duplicates).\n                                    response.headers = Object.entries(headers).reduce(function (acc, _a) {\n                                        var name = _a[0], value = _a[1];\n                                        var headerName = name.toLowerCase();\n                                        var headerValue = acc.hasOwnProperty(headerName)\n                                            ? [].concat(acc[headerName], value)\n                                            : value;\n                                        acc[headerName] = headerValue;\n                                        return acc;\n                                    }, {});\n                                    // Converts mocked response headers to raw headers.\n                                    // @see https://nodejs.org/api/http.html#http_message_rawheaders\n                                    response.rawHeaders = Object.entries(headers).reduce(function (acc, _a) {\n                                        var name = _a[0], value = _a[1];\n                                        return acc.concat(name, value);\n                                    }, []);\n                                    if (mockedResponse.body) {\n                                        debug('writing response body...');\n                                        response.push(Buffer.from(mockedResponse.body));\n                                    }\n                                }\n                                debug('response is complete, finishing request...');\n                                // Invoke the \"req.end()\" callback.\n                                callback === null || callback === void 0 ? void 0 : callback();\n                                this.finished = true;\n                                this.emit('finish');\n                                this.emit('response', response);\n                                // Pushing `null` indicates that the response body is complete\n                                // and must not be modified anymore.\n                                response.push(null);\n                                response.complete = true;\n                                return [2 /*return*/, this];\n                            }\n                            debug('no mocked response received');\n                            debug('performing original %s %s (%s)', options.method, url.href, url.protocol);\n                            debug('original request options', options);\n                            debug('original request body (written)', writtenRequestBody);\n                            debug('original request body (end)', chunk);\n                            debug('using', performOriginalRequest);\n                            // Decide whether to use HTTPS based on the URL protocol.\n                            // XHR can trigger http.request for HTTPS URL.\n                            if (url.protocol === 'https:') {\n                                debug('reverting patches...');\n                                ClientRequest = http_1.default.ClientRequest;\n                                // @ts-ignore\n                                http_1.default.ClientRequest = originalClientRequest;\n                                req = performOriginalRequest(options);\n                                debug('re-applying patches...');\n                                // @ts-ignore\n                                http_1.default.ClientRequest = ClientRequest;\n                            }\n                            else {\n                                req = performOriginalRequest(options);\n                            }\n                            // Propagate headers set after `ClientRequest` is constructed\n                            // onto the original request instance.\n                            inheritRequestHeaders_1.inheritRequestHeaders(req, outHeaders);\n                            // Propagate a request body buffer written via `req.write()`\n                            // to the original request.\n                            if (requestBodyBuffer.length > 0 && req.writable) {\n                                req.write(Buffer.concat(requestBodyBuffer));\n                            }\n                            req.on('finish', function () {\n                                _this.emit('finish');\n                            });\n                            req.on('response', function (response) {\n                                debug(response.statusCode, options.method, url.href);\n                                _this.emit('response', response);\n                            });\n                            req.on('error', function (error) {\n                                debug('original request error', error);\n                                _this.emit('error', error);\n                            });\n                            // Provide a callback when an original request is finished,\n                            // so it can be debugged.\n                            req.end.apply(req, [\n                                chunk,\n                                encoding,\n                                function () {\n                                    debug('request ended', _this.method, url.href);\n                                    callback === null || callback === void 0 ? void 0 : callback();\n                                },\n                            ].filter(Boolean));\n                            return [2 /*return*/, req];\n                    }\n                });\n            });\n        };\n        this.abort = function () {\n            debug('abort');\n            if (_this.aborted) {\n                debug('already aborted');\n                return;\n            }\n            _this.aborted = Date.now();\n            var error = new Error();\n            error.code = 'aborted';\n            response.emit('close', error);\n            socket.destroy();\n            _this.emit('abort');\n        };\n        return this;\n    }\n    util_1.inherits(ClientRequestOverride, originalClientRequest);\n    return ClientRequestOverride;\n}\nexports.createClientRequestOverrideClass = createClientRequestOverrideClass;\n//# sourceMappingURL=ClientRequestOverride.js.map"]},"metadata":{},"sourceType":"script"}